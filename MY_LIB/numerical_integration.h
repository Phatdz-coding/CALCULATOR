#ifndef NUMERICAL_INTEGRATION
#define NUMERICAL_INTEGRATION

#include <MY_LIB/global_var.h>
#include <MY_LIB/my_calculator.h>
#include <MY_LIB/inputsDisplays.h>
#include <MY_LIB/lexer_and_format.h>
#include <MY_LIB/extra_math_function.h>

#define GAUSSIAN_QUADRATURE_700 1
#define DBL_TANH_SINH_QUADRATURE 2
#define ADAPTIVE_QUADRATURE 3
#define SIMPSON_RULE 4

// ------------------------------quad.c------------------------------ //

// Use these macores for better optimization
// #define FUDGE1 160
// #define FUDGE2 16

#define FUDGE1 10
#define FUDGE2 1

#define sign(x) (((x) > 0) - ((x) < 0))

// ------------------------------------------------------------------ //

// =============================================================================================================================== //
// =============================================================================================================================== //
// =============================================================================================================================== //

void ni_decide_integration_method(const __INFIX__ I_function, const char var, const double a, const double b, short int *conclusion);
double ni_integrate(const __INFIX__ I_function, const char var, const double a, const double b, unsigned short int *method);

double ni_eval_P_function(const _POSTFIX__, const char, const double);
short int ni_substitude_variables(__INFIX__ *I_expression, const char *exceptions);

double ni_integral_simpson(const __INFIX__ I_function, const char var, const double a, const double b);

short int ni_integral_quad(const __INFIX__, const char, const double, const double, double *, double *);
double quad(const __INFIX__ I_function, const char var, /* double (*___function___)(double), */ double a, double b, int n, double eps, double *err);
double exp_sinh_opt_d(const _POSTFIX__ P_function, const char var, /* double (*___function___)(double), */ double a, double eps, double d);

short int ni_integral_aq(const __INFIX__ I_function, const char var, const double a, const double b, double *result, const double tolerance);
short int ni_recurse(const _POSTFIX__ P_function, const char var, const double a, const double b, double *result, const double tolerance, const double simpson_estimate);
double ni_simpson_estimate(const _POSTFIX__ P_function, const char var, const double a, const double b);

short int ni_integral_GaussianQuadrature700(const __INFIX__ I_function, const char var, const double a, const double b, double *result);
double ni_integral_GaussianQuadrature500(const __INFIX__ I_function, const char var, double a, double b);

// =============================================================================================================================== //
// =============================================================================================================================== //
// =============================================================================================================================== //

// =============================================================================================================================== //
// Gaussian Quadrature
// =============================================================================================================================== //

/*
Gaussian Quadrature method with 500 weights and nodes

Best for general cases, fast, handle moderate oscillatory functions (E.g sin(100x))

@param I_function: Function to integrate (infix type)
@param var: Integrate with respect to
@param a, b: Lower & upper bounds
@param result: (double type) Pointer to a memory cell that stores the integral

Returns: The result of the integral

References:

https://math.okstate.edu/people/yqwang/teaching/math4513_fall12/Notes/gaussian.pdf

https://pomax.github.io/bezierinfo/legendre-gauss.html
*/
double ni_integral_GaussianQuadrature500(const __INFIX__ I_function, const char var, double a, double b)
{
    // check for valid parameter
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return NAN;
    if (var == '\0' || var == 'c' || var == 'e' || var == 'g')
        return NAN;
    if (is_zero(b - a))
        return 0.0;

    double sign = 1.0;

    if (b < a)
    {
        double temp = b;
        b = a;
        a = temp;

        sign = -1.0;
    }

    // Gaussâ€“Legendre weights and nodes for n = 500
    double weights[500] = {
        2.962364450555644e-05,
        6.89570728205074e-05,
        0.0001083460286934494,
        0.00014773577476858758,
        0.0001871207158557841,
        0.00022649858871036835,
        0.00026586765326214174,
        0.00030522629426960014,
        0.00034457293521267176,
        0.00038390601413328845,
        0.0004232239754797741,
        0.00046252526700028325,
        0.0005018083384640074,
        0.0005410716410692871,
        0.0005803136271951402,
        0.000619532750301983,
        0.0006587274648936571,
        0.0006978962265239956,
        0.0007370374918303779,
        0.0007761497185724115,
        0.0008152313656796535,
        0.0008542808933021158,
        0.000893296762876444,
        0.000932277437164903,
        0.0009712213803292163,
        0.0010101270579808048,
        0.0010489929372477008,
        0.001087817486819288,
        0.0011265991770259313,
        0.001165336479880678,
        0.0012040278691495142,
        0.0012426718204084238,
        0.001281266811103743,
        0.0013198113206112235,
        0.0013583038302951032,
        0.0013967428235689707,
        0.001435126785955902,
        0.0014734542051496194,
        0.0015117235710660469,
        0.0015499333759148874,
        0.0015880821142481758,
        0.0016261682830269436,
        0.0016641903816764746,
        0.0017021469121446798,
        0.0017400363789658421,
        0.0017778572893161115,
        0.0018156081530703236,
        0.001853287482865466,
        0.0018908937941571266,
        0.0019284256052762908,
        0.001965881437489857,
        0.0020032598150595254,
        0.002040559265296426,
        0.0020777783186228162,
        0.002114915508628639,
        0.0021519693721285143,
        0.002188938449221406,
        0.002225821283344368,
        0.0022626164213351667,
        0.0022993224134848934,
        0.0023359378135980493,
        0.002372461179047586,
        0.0024088910708330792,
        0.0024452260536369447,
        0.0024814646958799965,
        0.002517605569780819,
        0.002553647251408836,
        0.0025895883207401,
        0.002625427361717593,
        0.002661162962301729,
        0.0026967937145305747,
        0.002732318214571503,
        0.0027677350627784056,
        0.002803042863747332,
        0.0028382402263707513,
        0.0028733257638912033,
        0.0029082980939583803,
        0.002943155838680796,
        0.0029778976246835577,
        0.00301252208315887,
        0.003047027849922231,
        0.003081413565465014,
        0.0031156778750098773,
        0.0031498194285608304,
        0.0031838368809594727,
        0.003217728891937881,
        0.003251494126168959,
        0.0032851312533203917,
        0.0033186389481087075,
        0.003352015890349023,
        0.0033852607650076893,
        0.0034183722622554867,
        0.0034513490775173413,
        0.0034841899115251916,
        0.003516893470368367,
        0.0035494584655435877,
        0.00358188361400878,
        0.0036141676382310047,
        0.003646309266237613,
        0.0036783072316653666,
        0.0037101602738126944,
        0.0037418671376866883,
        0.003773426574055361,
        0.003804837339493149,
        0.003836098196433851,
        0.003867207913216991,
        0.0038981652641361577,
        0.003928969029489261,
        0.003959617995624746,
        0.003990110954990722,
        0.004020446706180627,
        0.004050624053982821,
        0.004080641809426447,
        0.004110498789828243,
        0.004140193818840072,
        0.004169725726493957,
        0.0041990933492489805,
        0.004228295530036822,
        0.004257331118307547,
        0.0042861989700751614,
        0.004314897947962083,
        0.004343426921244604,
        0.004371784765896552,
        0.0043999703646348965,
        0.0044279826069618155,
        0.00445582038921107,
        0.004483482614589362,
        0.004510968193219391,
        0.0045382760421856716,
        0.00456540508557294,
        0.004592354254512642,
        0.004619122487221592,
        0.004645708729046646,
        0.004672111932504433,
        0.004698331057323403,
        0.004724365070484263,
        0.004750212946261073,
        0.004775873666261864,
        0.004801346219468435,
        0.004826629602276515,
        0.0048517228185342275,
        0.00487662487958296,
        0.004901334804294899,
        0.004925851619113117,
        0.004950174358088109,
        0.004974302062917719,
        0.004998233782983438,
        0.005021968575388622,
        0.0050455055049957115,
        0.005068843644462379,
        0.005091982074279162,
        0.005114919882804143,
        0.0051376561663007345,
        0.005160190028971686,
        0.005182520582995276,
        0.005204646948559886,
        0.005226568253898823,
        0.005248283635325007,
        0.005269792237264015,
        0.005291093212288935,
        0.005312185721152992,
        0.0053330689328232265,
        0.005353742024512282,
        0.005374204181711729,
        0.0053944545982239096,
        0.005414492476193589,
        0.005434317026139524,
        0.0054539274669850564,
        0.005473323026089905,
        0.005492502939279499,
        0.005511466450875798,
        0.005530212813727121,
        0.005548741289236881,
        0.005567051147393393,
        0.005585141666798403,
        0.005603012134695254,
        0.005620661846997398,
        0.005638090108315948,
        0.005655296231986928,
        0.005672279540098546,
        0.005689039363517814,
        0.005705575041916978,
        0.005721885923799338,
        0.005737971366525118,
        0.005753830736336728,
        0.005769463408383799,
        0.005784868766747513,
        0.005800046204465446,
        0.005814995123554662,
        0.005829714935036055,
        0.005844205058957262,
        0.0058584649244152655,
        0.005872493969579246,
        0.005886291641712568,
        0.005899857397194459,
        0.0059131907015417305,
        0.005926291029429498,
        0.005939157864711969,
        0.0059517907004430015,
        0.005964189038895738,
        0.0059763523915825675,
        0.005988280279274043,
        0.0059999722320179675,
        0.006011427789157794,
        0.006022646499350913,
        0.0060336279205863005,
        0.006044371620201972,
        0.006054877174902154,
        0.006065144170773736,
        0.006075172203302678,
        0.006084960877390096,
        0.00609450980736758,
        0.006103818617012571,
        0.0061128869395630355,
        0.0061217144177320906,
        0.006130300703721955,
        0.006138645459237711,
        0.006146748355500514,
        0.006154609073260782,
        0.006162227302810531,
        0.006169602743995684,
        0.0061767351062279605,
        0.0061836241084962116,
        0.006190269479377487,
        0.006196670957047914,
        0.0062028282892927005,
        0.006208741233516407,
        0.0062144095567522924,
        0.006219833035671499,
        0.006225011456591944,
        0.006229944615486749,
        0.006234632317992107,
        0.006239074379415165,
        0.006243270624741095,
        0.006247220888640169,
        0.006250925015474178,
        0.006254382859302553,
        0.006257594283888137,
        0.0062605591627025725,
        0.006263277378931298,
        0.006265748825478026,
        0.006267973404969174,
        0.006269951029757515,
        0.006271681621925733,
        0.0062731651132894245,
        0.006274401445399896,
        0.006275390569546302,
        0.006276132446757668,
        0.006276627047804515,
        0.006276874353199775,
        0.006276874353199775,
        0.006276627047804515,
        0.006276132446757668,
        0.006275390569546302,
        0.006274401445399896,
        0.0062731651132894245,
        0.006271681621925733,
        0.006269951029757515,
        0.006267973404969174,
        0.006265748825478026,
        0.006263277378931298,
        0.0062605591627025725,
        0.006257594283888137,
        0.006254382859302553,
        0.006250925015474178,
        0.006247220888640169,
        0.006243270624741095,
        0.006239074379415165,
        0.006234632317992107,
        0.006229944615486749,
        0.006225011456591944,
        0.006219833035671499,
        0.0062144095567522924,
        0.006208741233516407,
        0.0062028282892927005,
        0.006196670957047914,
        0.006190269479377487,
        0.0061836241084962116,
        0.0061767351062279605,
        0.006169602743995684,
        0.006162227302810531,
        0.006154609073260782,
        0.006146748355500514,
        0.006138645459237711,
        0.006130300703721955,
        0.0061217144177320906,
        0.0061128869395630355,
        0.006103818617012571,
        0.00609450980736758,
        0.006084960877390096,
        0.006075172203302678,
        0.006065144170773736,
        0.006054877174902154,
        0.006044371620201972,
        0.0060336279205863005,
        0.006022646499350913,
        0.006011427789157794,
        0.0059999722320179675,
        0.005988280279274043,
        0.0059763523915825675,
        0.005964189038895738,
        0.0059517907004430015,
        0.005939157864711969,
        0.005926291029429498,
        0.0059131907015417305,
        0.005899857397194459,
        0.005886291641712568,
        0.005872493969579246,
        0.0058584649244152655,
        0.005844205058957262,
        0.005829714935036055,
        0.005814995123554662,
        0.005800046204465446,
        0.005784868766747513,
        0.005769463408383799,
        0.005753830736336728,
        0.005737971366525118,
        0.005721885923799338,
        0.005705575041916978,
        0.005689039363517814,
        0.005672279540098546,
        0.005655296231986928,
        0.005638090108315948,
        0.005620661846997398,
        0.005603012134695254,
        0.005585141666798403,
        0.005567051147393393,
        0.005548741289236881,
        0.005530212813727121,
        0.005511466450875798,
        0.005492502939279499,
        0.005473323026089905,
        0.0054539274669850564,
        0.005434317026139524,
        0.005414492476193589,
        0.0053944545982239096,
        0.005374204181711729,
        0.005353742024512282,
        0.0053330689328232265,
        0.005312185721152992,
        0.005291093212288935,
        0.005269792237264015,
        0.005248283635325007,
        0.005226568253898823,
        0.005204646948559886,
        0.005182520582995276,
        0.005160190028971686,
        0.0051376561663007345,
        0.005114919882804143,
        0.005091982074279162,
        0.005068843644462379,
        0.0050455055049957115,
        0.005021968575388622,
        0.004998233782983438,
        0.004974302062917719,
        0.004950174358088109,
        0.004925851619113117,
        0.004901334804294899,
        0.00487662487958296,
        0.0048517228185342275,
        0.004826629602276515,
        0.004801346219468435,
        0.004775873666261864,
        0.004750212946261073,
        0.004724365070484263,
        0.004698331057323403,
        0.004672111932504433,
        0.004645708729046646,
        0.004619122487221592,
        0.004592354254512642,
        0.00456540508557294,
        0.0045382760421856716,
        0.004510968193219391,
        0.004483482614589362,
        0.00445582038921107,
        0.0044279826069618155,
        0.0043999703646348965,
        0.004371784765896552,
        0.004343426921244604,
        0.004314897947962083,
        0.0042861989700751614,
        0.004257331118307547,
        0.004228295530036822,
        0.0041990933492489805,
        0.004169725726493957,
        0.004140193818840072,
        0.004110498789828243,
        0.004080641809426447,
        0.004050624053982821,
        0.004020446706180627,
        0.003990110954990722,
        0.003959617995624746,
        0.003928969029489261,
        0.0038981652641361577,
        0.003867207913216991,
        0.003836098196433851,
        0.003804837339493149,
        0.003773426574055361,
        0.0037418671376866883,
        0.0037101602738126944,
        0.0036783072316653666,
        0.003646309266237613,
        0.0036141676382310047,
        0.00358188361400878,
        0.0035494584655435877,
        0.003516893470368367,
        0.0034841899115251916,
        0.0034513490775173413,
        0.0034183722622554867,
        0.0033852607650076893,
        0.003352015890349023,
        0.0033186389481087075,
        0.0032851312533203917,
        0.003251494126168959,
        0.003217728891937881,
        0.0031838368809594727,
        0.0031498194285608304,
        0.0031156778750098773,
        0.003081413565465014,
        0.003047027849922231,
        0.00301252208315887,
        0.0029778976246835577,
        0.002943155838680796,
        0.0029082980939583803,
        0.0028733257638912033,
        0.0028382402263707513,
        0.002803042863747332,
        0.0027677350627784056,
        0.002732318214571503,
        0.0026967937145305747,
        0.002661162962301729,
        0.002625427361717593,
        0.0025895883207401,
        0.002553647251408836,
        0.002517605569780819,
        0.0024814646958799965,
        0.0024452260536369447,
        0.0024088910708330792,
        0.002372461179047586,
        0.0023359378135980493,
        0.0022993224134848934,
        0.0022626164213351667,
        0.002225821283344368,
        0.002188938449221406,
        0.0021519693721285143,
        0.002114915508628639,
        0.0020777783186228162,
        0.002040559265296426,
        0.0020032598150595254,
        0.001965881437489857,
        0.0019284256052762908,
        0.0018908937941571266,
        0.001853287482865466,
        0.0018156081530703236,
        0.0017778572893161115,
        0.0017400363789658421,
        0.0017021469121446798,
        0.0016641903816764746,
        0.0016261682830269436,
        0.0015880821142481758,
        0.0015499333759148874,
        0.0015117235710660469,
        0.0014734542051496194,
        0.001435126785955902,
        0.0013967428235689707,
        0.0013583038302951032,
        0.0013198113206112235,
        0.001281266811103743,
        0.0012426718204084238,
        0.0012040278691495142,
        0.001165336479880678,
        0.0011265991770259313,
        0.001087817486819288,
        0.0010489929372477008,
        0.0010101270579808048,
        0.0009712213803292163,
        0.000932277437164903,
        0.000893296762876444,
        0.0008542808933021158,
        0.0008152313656796535,
        0.0007761497185724115,
        0.0007370374918303779,
        0.0006978962265239956,
        0.0006587274648936571,
        0.000619532750301983,
        0.0005803136271951402,
        0.0005410716410692871,
        0.0005018083384640074,
        0.00046252526700028325,
        0.0004232239754797741,
        0.00038390601413328845,
        0.00034457293521267176,
        0.00030522629426960014,
        0.00026586765326214174,
        0.00022649858871036835,
        0.0001871207158557841,
        0.00014773577476858758,
        0.0001083460286934494,
        6.89570728205074e-05,
        2.962364450555644e-05};

    double nodes[500] = {
        -0.9999884567522129,
        -0.9999391798145371,
        -0.9998505288592006,
        -0.9997224876879449,
        -0.9995550589335447,
        -0.9993482486165864,
        -0.9991020646933555,
        -0.9988165167849478,
        -0.9984916161049857,
        -0.9981273754352638,
        -0.9977238091159455,
        -0.997280933040936,
        -0.9967987646553128,
        -0.9962773229536412,
        -0.9957166284786823,
        -0.9951167033202715,
        -0.9944775711142633,
        -0.9937992570414846,
        -0.9930817878266696,
        -0.992325191737358,
        -0.9915294985827499,
        -0.9906947397125084,
        -0.9898209480155092,
        -0.9889081579185339,
        -0.9879564053849051,
        -0.9869657279130641,
        -0.9859361645350886,
        -0.9848677558151522,
        -0.9837605438479229,
        -0.9826145722569035,
        -0.9814298861927109,
        -0.9802065323312958,
        -0.9789445588721034,
        -0.977644015536173,
        -0.9763049535641788,
        -0.9749274257144106,
        -0.9735114862606945,
        -0.9720571909902542,
        -0.9705645972015134,
        -0.9690337637018371,
        -0.9674647508052152,
        -0.9658576203298855,
        -0.9642124355958984,
        -0.9625292614226219,
        -0.9608081641261872,
        -0.9590492115168765,
        -0.957252472896451,
        -0.9554180190554201,
        -0.9535459222702526,
        -0.9516362563005288,
        -0.9496890963860347,
        -0.947704519243797,
        -0.9456826030650609,
        -0.9436234275122095,
        -0.9415270737156246,
        -0.9393936242704907,
        -0.9372231632335403,
        -0.9350157761197427,
        -0.9327715498989343,
        -0.930490572992392,
        -0.9281729352693497,
        -0.9258187280434574,
        -0.9234280440691834,
        -0.9210009775381599,
        -0.9185376240754719,
        -0.9160380807358894,
        -0.9135024460000439,
        -0.9109308197705482,
        -0.9083233033680599,
        -0.9056799995272898,
        -0.9030010123929542,
        -0.9002864475156713,
        -0.8975364118478033,
        -0.8947510137392416,
        -0.8919303629331384,
        -0.8890745705615831,
        -0.8861837491412231,
        -0.8832580125688314,
        -0.8802974761168184,
        -0.877302256428691,
        -0.8742724715144563,
        -0.8712082407459724,
        -0.8681096848522449,
        -0.864976925914671,
        -0.8618100873622285,
        -0.8586092939666133,
        -0.8553746718373237,
        -0.8521063484166915,
        -0.8488044524748606,
        -0.8454691141047138,
        -0.8421004647167475,
        -0.8386986370338935,
        -0.8352637650862903,
        -0.8317959842060023,
        -0.8282954310216877,
        -0.8247622434532156,
        -0.8211965607062316,
        -0.8175985232666736,
        -0.8139682728952365,
        -0.8103059526217874,
        -0.8066117067397293,
        -0.802885680800317,
        -0.7991280216069218,
        -0.7953388772092481,
        -0.7915183968974999,
        -0.7876667311964989,
        -0.7837840318597541,
        -0.7798704518634826,
        -0.7759261454005825,
        -0.7719512678745576,
        -0.7679459758933952,
        -0.7639104272633951,
        -0.7598447809829524,
        -0.7557491972362932,
        -0.7516238373871631,
        -0.7474688639724699,
        -0.7432844406958796,
        -0.7390707324213666,
        -0.7348279051667179,
        -0.7305561260969925,
        -0.7262555635179349,
        -0.7219263868693439,
        -0.7175687667183971,
        -0.7131828747529303,
        -0.7087688837746735,
        -0.704326967692442,
        -0.6998573015152848,
        -0.6953600613455899,
        -0.6908354243721447,
        -0.6862835688631563,
        -0.6817046741592265,
        -0.6770989206662871,
        -0.6724664898484908,
        -0.6678075642210626,
        -0.6631223273431083,
        -0.6584109638103826,
        -0.6536736592480159,
        -0.648910600303201,
        -0.6441219746378392,
        -0.6393079709211461,
        -0.6344687788222193,
        -0.6296045890025642,
        -0.624715593108583,
        -0.6198019837640233,
        -0.6148639545623893,
        -0.609901700059314,
        -0.604915415764894,
        -0.5999052981359867,
        -0.5948715445684692,
        -0.5898143533894622,
        -0.5847339238495148,
        -0.5796304561147554,
        -0.5745041512590039,
        -0.5693552112558506,
        -0.5641838389706982,
        -0.5589902381527688,
        -0.5537746134270766,
        -0.5485371702863653,
        -0.5432781150830126,
        -0.5379976550208994,
        -0.5326959981472461,
        -0.5273733533444159,
        -0.5220299303216851,
        -0.5166659396069802,
        -0.5112815925385833,
        -0.505877101256806,
        -0.5004526786956304,
        -0.4950085385743205,
        -0.4895448953890009,
        -0.48406196440420657,
        -0.4785599616444009,
        -0.4730391038854647,
        -0.4674996086461556,
        -0.46194169417953745,
        -0.45636557946438167,
        -0.45077148419653945,
        -0.4451596287802858,
        -0.4395302343196359,
        -0.4338835226096335,
        -0.42821971612761245,
        -0.4225390380244314,
        -0.41684171211568133,
        -0.4111279628728678,
        -0.4053980154145666,
        -0.3996520954975543,
        -0.3938904295079136,
        -0.38811324445211376,
        -0.38232076794806663,
        -0.3765132282161589,
        -0.37069085407026003,
        -0.36485387490870713,
        -0.35900252070526706,
        -0.35313702200007535,
        -0.3472576098905531,
        -0.34136451602230194,
        -0.33545797257997717,
        -0.32953821227813995,
        -0.32360546835208853,
        -0.3176599745486687,
        -0.3117019651170644,
        -0.3057316747995684,
        -0.2997493388223338,
        -0.2937551928861058,
        -0.2877494731569357,
        -0.28173241625687584,
        -0.27570425925465675,
        -0.269665239656347,
        -0.2636155953959953,
        -0.2575555648262563,
        -0.25148538670899967,
        -0.24540530020590262,
        -0.23931554486902742,
        -0.2332163606313831,
        -0.22710798779747213,
        -0.22099066703382264,
        -0.2148646393595063,
        -0.2087301461366422,
        -0.20258742906088745,
        -0.19643673015191443,
        -0.19027829174387526,
        -0.18411235647585422,
        -0.17793916728230763,
        -0.17175896738349253,
        -0.1655720002758839,
        -0.15937850972258097,
        -0.15317873974370322,
        -0.14697293460677596,
        -0.14076133881710645,
        -0.1345441971081505,
        -0.12832175443187002,
        -0.1220942559490822,
        -0.11586194701980015,
        -0.10962507319356599,
        -0.1033838801997762,
        -0.09713861393800015,
        -0.09088952046829167,
        -0.08463684600149451,
        -0.07838083688954174,
        -0.0721217396157496,
        -0.0658598007851062,
        -0.05959526711455543,
        -0.05332838542327645,
        -0.04705940262295916,
        -0.040788565708075965,
        -0.034516121746150395,
        -0.02824231786802273,
        -0.021967401258113205,
        -0.015691619144683082,
        -0.009415218790093976,
        -0.0031384474810658676,
        0.0031384474810658676,
        0.009415218790093976,
        0.015691619144683082,
        0.021967401258113205,
        0.02824231786802273,
        0.034516121746150395,
        0.040788565708075965,
        0.04705940262295916,
        0.05332838542327645,
        0.05959526711455543,
        0.0658598007851062,
        0.0721217396157496,
        0.07838083688954174,
        0.08463684600149451,
        0.09088952046829167,
        0.09713861393800015,
        0.1033838801997762,
        0.10962507319356599,
        0.11586194701980015,
        0.1220942559490822,
        0.12832175443187002,
        0.1345441971081505,
        0.14076133881710645,
        0.14697293460677596,
        0.15317873974370322,
        0.15937850972258097,
        0.1655720002758839,
        0.17175896738349253,
        0.17793916728230763,
        0.18411235647585422,
        0.19027829174387526,
        0.19643673015191443,
        0.20258742906088745,
        0.2087301461366422,
        0.2148646393595063,
        0.22099066703382264,
        0.22710798779747213,
        0.2332163606313831,
        0.23931554486902742,
        0.24540530020590262,
        0.25148538670899967,
        0.2575555648262563,
        0.2636155953959953,
        0.269665239656347,
        0.27570425925465675,
        0.28173241625687584,
        0.2877494731569357,
        0.2937551928861058,
        0.2997493388223338,
        0.3057316747995684,
        0.3117019651170644,
        0.3176599745486687,
        0.32360546835208853,
        0.32953821227813995,
        0.33545797257997717,
        0.34136451602230194,
        0.3472576098905531,
        0.35313702200007535,
        0.35900252070526706,
        0.36485387490870713,
        0.37069085407026003,
        0.3765132282161589,
        0.38232076794806663,
        0.38811324445211376,
        0.3938904295079136,
        0.3996520954975543,
        0.4053980154145666,
        0.4111279628728678,
        0.41684171211568133,
        0.4225390380244314,
        0.42821971612761245,
        0.4338835226096335,
        0.4395302343196359,
        0.4451596287802858,
        0.45077148419653945,
        0.45636557946438167,
        0.46194169417953745,
        0.4674996086461556,
        0.4730391038854647,
        0.4785599616444009,
        0.48406196440420657,
        0.4895448953890009,
        0.4950085385743205,
        0.5004526786956304,
        0.505877101256806,
        0.5112815925385833,
        0.5166659396069802,
        0.5220299303216851,
        0.5273733533444159,
        0.5326959981472461,
        0.5379976550208994,
        0.5432781150830126,
        0.5485371702863653,
        0.5537746134270766,
        0.5589902381527688,
        0.5641838389706982,
        0.5693552112558506,
        0.5745041512590039,
        0.5796304561147554,
        0.5847339238495148,
        0.5898143533894622,
        0.5948715445684692,
        0.5999052981359867,
        0.604915415764894,
        0.609901700059314,
        0.6148639545623893,
        0.6198019837640233,
        0.624715593108583,
        0.6296045890025642,
        0.6344687788222193,
        0.6393079709211461,
        0.6441219746378392,
        0.648910600303201,
        0.6536736592480159,
        0.6584109638103826,
        0.6631223273431083,
        0.6678075642210626,
        0.6724664898484908,
        0.6770989206662871,
        0.6817046741592265,
        0.6862835688631563,
        0.6908354243721447,
        0.6953600613455899,
        0.6998573015152848,
        0.704326967692442,
        0.7087688837746735,
        0.7131828747529303,
        0.7175687667183971,
        0.7219263868693439,
        0.7262555635179349,
        0.7305561260969925,
        0.7348279051667179,
        0.7390707324213666,
        0.7432844406958796,
        0.7474688639724699,
        0.7516238373871631,
        0.7557491972362932,
        0.7598447809829524,
        0.7639104272633951,
        0.7679459758933952,
        0.7719512678745576,
        0.7759261454005825,
        0.7798704518634826,
        0.7837840318597541,
        0.7876667311964989,
        0.7915183968974999,
        0.7953388772092481,
        0.7991280216069218,
        0.802885680800317,
        0.8066117067397293,
        0.8103059526217874,
        0.8139682728952365,
        0.8175985232666736,
        0.8211965607062316,
        0.8247622434532156,
        0.8282954310216877,
        0.8317959842060023,
        0.8352637650862903,
        0.8386986370338935,
        0.8421004647167475,
        0.8454691141047138,
        0.8488044524748606,
        0.8521063484166915,
        0.8553746718373237,
        0.8586092939666133,
        0.8618100873622285,
        0.864976925914671,
        0.8681096848522449,
        0.8712082407459724,
        0.8742724715144563,
        0.877302256428691,
        0.8802974761168184,
        0.8832580125688314,
        0.8861837491412231,
        0.8890745705615831,
        0.8919303629331384,
        0.8947510137392416,
        0.8975364118478033,
        0.9002864475156713,
        0.9030010123929542,
        0.9056799995272898,
        0.9083233033680599,
        0.9109308197705482,
        0.9135024460000439,
        0.9160380807358894,
        0.9185376240754719,
        0.9210009775381599,
        0.9234280440691834,
        0.9258187280434574,
        0.9281729352693497,
        0.930490572992392,
        0.9327715498989343,
        0.9350157761197427,
        0.9372231632335403,
        0.9393936242704907,
        0.9415270737156246,
        0.9436234275122095,
        0.9456826030650609,
        0.947704519243797,
        0.9496890963860347,
        0.9516362563005288,
        0.9535459222702526,
        0.9554180190554201,
        0.957252472896451,
        0.9590492115168765,
        0.9608081641261872,
        0.9625292614226219,
        0.9642124355958984,
        0.9658576203298855,
        0.9674647508052152,
        0.9690337637018371,
        0.9705645972015134,
        0.9720571909902542,
        0.9735114862606945,
        0.9749274257144106,
        0.9763049535641788,
        0.977644015536173,
        0.9789445588721034,
        0.9802065323312958,
        0.9814298861927109,
        0.9826145722569035,
        0.9837605438479229,
        0.9848677558151522,
        0.9859361645350886,
        0.9869657279130641,
        0.9879564053849051,
        0.9889081579185339,
        0.9898209480155092,
        0.9906947397125084,
        0.9915294985827499,
        0.992325191737358,
        0.9930817878266696,
        0.9937992570414846,
        0.9944775711142633,
        0.9951167033202715,
        0.9957166284786823,
        0.9962773229536412,
        0.9967987646553128,
        0.997280933040936,
        0.9977238091159455,
        0.9981273754352638,
        0.9984916161049857,
        0.9988165167849478,
        0.9991020646933555,
        0.9993482486165864,
        0.9995550589335447,
        0.9997224876879449,
        0.9998505288592006,
        0.9999391798145371,
        0.9999884567522129};

    _POSTFIX__ P_function = submodule_Parse(I_function);
    double sum = 0.0;
    double _A_ = (b - a) / 2.0;
    double _B_ = (b + a) / 2.0;
    for (unsigned short int i = 0; i < 500; i++)
    {
        sum += weights[i] * ni_eval_P_function(P_function, var, _A_ * nodes[i] + _B_);
    }

    free(P_function.tokens);

    sum *= sign * _A_;

    return sum;
}

/*
Gaussian Quadrature method with 1000 weights and nodes

Best for general cases, a lil bit slower than the 500 version, but handle strong oscillatory functions

@param I_function: Function to integrate (infix type)
@param var: Integrate with respect to
@param a, b: Lower & upper bounds
@param result: (double type) Pointer to a memory cell that stores the integral

Returns:

0  : If the integral is found

-1 : Invalid I_function

-2 : Invalid variable to integrate (E.g: 'c' 'e' 'g')

-3 : Failed to convert infxi to postfix

References:

https://math.okstate.edu/people/yqwang/teaching/math4513_fall12/Notes/gaussian.pdf

https://pomax.github.io/bezierinfo/legendre-gauss.html
*/
short int ni_integral_GaussianQuadrature700(const __INFIX__ I_function, const char var, double a, double b, double *result)
{
    // check for valid parameter
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return -1;
    if (var == '\0' || var == 'c' || var == 'e' || var == 'g')
        return -2;

    if (is_zero(b - a))
    {
        (*result) = 0.0;
        return 0;
    }

    double sign = 1.0;

    if (b < a)
    {
        double temp = b;
        b = a;
        a = temp;

        sign = -1.0;
    }

    double nodes[700] = {

        -0.9999941072178984,

        -0.9999689514123065,

        -0.9999236947182248,

        -0.999858327993772,

        -0.9997728513224007,

        -0.9996672661292814,

        -0.9995415744401039,

        -0.9993957787429115,

        -0.9992298819513438,

        -0.9990438873923717,

        -0.9988377988014838,

        -0.9986116203205365,

        -0.9983653564966798,

        -0.9980990122817561,

        -0.9978125930319236,

        -0.9975061045073889,

        -0.997179552872197,

        -0.9968329446940483,

        -0.9964662869441292,

        -0.9960795869969472,

        -0.9956728526301664,

        -0.9952460920244388,

        -0.9947993137632332,

        -0.9943325268326559,

        -0.9938457406212662,

        -0.9933389649198844,

        -0.9928122099213931,

        -0.99226548622053,

        -0.9916988048136738,

        -0.9911121770986216,

        -0.9905056148743601,

        -0.9898791303408258,

        -0.9892327360986609,

        -0.9885664451489585,

        -0.9878802708930013,

        -0.9871742271319912,

        -0.9864483280667723,

        -0.9857025882975444,

        -0.9849370228235697,

        -0.9841516470428707,

        -0.9833464767519208,

        -0.9825215281453259,

        -0.9816768178154993,

        -0.9808123627523271,

        -0.9799281803428275,

        -0.9790242883707998,

        -0.9781007050164678,

        -0.9771574488561137,

        -0.9761945388617038,

        -0.9752119944005082,

        -0.9742098352347098,

        -0.9731880815210083,

        -0.9721467538102133,

        -0.9710858730468319,

        -0.9700054605686473,

        -0.9689055381062893,

        -0.9677861277827974,

        -0.9666472521131758,

        -0.9654889340039409,

        -0.9643111967526596,

        -0.963114064047482,

        -0.9618975599666639,

        -0.9606617089780829,

        -0.9594065359387465,

        -0.9581320660942916,

        -0.9568383250784773,

        -0.9555253389126688,

        -0.9541931340053146,

        -0.9528417371514146,

        -0.9514711755319818,

        -0.9500814767134955,

        -0.9486726686473463,

        -0.9472447796692749,

        -0.9457978384988011,

        -0.9443318742386466,

        -0.9428469163741503,

        -0.9413429947726741,

        -0.9398201396830029,

        -0.938278381734736,

        -0.9367177519376712,

        -0.9351382816811805,

        -0.9335400027335797,

        -0.9319229472414889,

        -0.9302871477291856,

        -0.9286326370979512,

        -0.9269594486254087,

        -0.925267615964854,

        -0.9235571731445781,

        -0.9218281545671838,

        -0.9200805950088927,

        -0.9183145296188465,

        -0.9165299939183995,

        -0.9147270238004048,

        -0.9129056555284913,

        -0.9110659257363358,

        -0.9092078714269246,

        -0.9073315299718105,

        -0.9054369391103606,

        -0.9035241369489969,

        -0.9015931619604308,

        -0.8996440529828883,

        -0.8976768492193296,

        -0.8956915902366598,

        -0.8936883159649339,

        -0.8916670666965535,

        -0.8896278830854557,

        -0.8875708061462964,

        -0.8854958772536243,

        -0.8834031381410501,

        -0.8812926309004055,

        -0.8791643979808981,

        -0.8770184821882564,

        -0.8748549266838697,

        -0.8726737749839192,

        -0.8704750709585036,

        -0.8682588588307564,

        -0.8660251831759557,

        -0.8637740889206288,

        -0.8615056213416481,

        -0.85921982606532,

        -0.8569167490664679,

        -0.8545964366675072,

        -0.8522589355375133,

        -0.8499042926912838,

        -0.8475325554883916,

        -0.8451437716322336,

        -0.8427379891690706,

        -0.8403152564870607,

        -0.8378756223152868,

        -0.8354191357227757,

        -0.8329458461175118,

        -0.8304558032454428,

        -0.8279490571894798,

        -0.8254256583684891,

        -0.8228856575362792,

        -0.8203291057805788,

        -0.8177560545220103,

        -0.8151665555130546,

        -0.8125606608370113,

        -0.8099384229069501,

        -0.807299894464657,

        -0.8046451285795736,

        -0.8019741786477299,

        -0.7992870983906695,

        -0.7965839418543701,

        -0.7938647634081557,

        -0.7911296177436036,

        -0.7883785598734436,

        -0.7856116451304528,

        -0.7828289291663413,

        -0.7800304679506336,

        -0.7772163177695428,

        -0.7743865352248385,

        -0.7715411772327082,

        -0.7686803010226125,

        -0.7658039641361346,

        -0.7629122244258218,

        -0.7600051400540233,

        -0.7570827694917192,

        -0.754145171517345,

        -0.7511924052156093,

        -0.7482245299763055,

        -0.7452416054931172,

        -0.7422436917624174,

        -0.7392308490820619,

        -0.7362031380501768,

        -0.7331606195639391,

        -0.7301033548183523,

        -0.7270314053050153,

        -0.7239448328108862,

        -0.7208436994170383,

        -0.717728067497413,

        -0.7145979997175642,

        -0.7114535590333981,

        -0.7082948086899071,

        -0.7051218122198978,

        -0.7019346334427128,

        -0.6987333364629477,

        -0.6955179856691608,

        -0.6922886457325791,

        -0.6890453816057966,

        -0.685788258521469,

        -0.6825173419910001,

        -0.6792326978032257,

        -0.6759343920230895,

        -0.6726224909903145,

        -0.6692970613180688,

        -0.6659581698916257,

        -0.6626058838670184,

        -0.6592402706696892,

        -0.6558613979931336,

        -0.6524693337975387,

        -0.649064146308416,

        -0.6456459040152295,

        -0.642214675670018,

        -0.6387705302860124,

        -0.6353135371362474,

        -0.6318437657521683,

        -0.6283612859222325,

        -0.6248661676905061,

        -0.6213584813552545,

        -0.6178382974675288,

        -0.6143056868297472,

        -0.6107607204942699,

        -0.6072034697619709,

        -0.6036340061808039,

        -0.6000524015443625,

        -0.5964587278904367,

        -0.5928530574995645,

        -0.5892354628935769,

        -0.5856060168341399,

        -0.5819647923212915,

        -0.5783118625919726,

        -0.5746473011185544,

        -0.5709711816073605,

        -0.5672835779971843,

        -0.5635845644578025,

        -0.5598742153884823,

        -0.5561526054164858,

        -0.5524198093955686,

        -0.5486759024044742,

        -0.5449209597454245,

        -0.5411550569426044,

        -0.5373782697406433,

        -0.5335906741030915,

        -0.5297923462108922,

        -0.5259833624608496,

        -0.5221637994640919,

        -0.5183337340445305,

        -0.514493243237315,

        -0.5106424042872837,

        -0.50678129464741,

        -0.502909991977244,

        -0.49902857414135166,

        -0.4951371192077476,

        -0.49123570544632544,

        -0.48732441132728344,

        -0.48340331551954613,

        -0.47947249688918214,

        -0.4755320344978178,

        -0.4715820076010471,

        -0.46762249564683755,

        -0.4636535782739321,

        -0.45967533531024757,

        -0.45568784677126883,

        -0.4516911928584396,

        -0.4476854539575493,

        -0.443670710637116,

        -0.4396470436467663,

        -0.435614533915611,

        -0.4315732625506172,

        -0.4275233108349773,

        -0.42346476022647384,

        -0.4193976923558413,

        -0.4153221890251242,

        -0.4112383322060317,

        -0.4071462040382889,

        -0.403045886827985,

        -0.3989374630459174,

        -0.3948210153259333,

        -0.3906966264632676,

        -0.38656437941287747,

        -0.382424357287774,

        -0.37827664335735056,

        -0.37412132104570767,

        -0.3699584739299755,

        -0.3657881857386326,

        -0.3616105403498218,

        -0.3574256217896635,

        -0.35323351423056504,

        -0.34903430198952834,

        -0.34482806952645356,

        -0.34061490144244055,

        -0.33639488247808724,

        -0.33216809751178517,

        -0.32793463155801217,

        -0.32369456976562283,

        -0.31944799741613544,

        -0.315194999922017,

        -0.3109356628249652,

        -0.3066700717941879,

        -0.3023983126246799,

        -0.2981204712354977,

        -0.29383663366803087,

        -0.28954688608427187,

        -0.28525131476508303,

        -0.28095000610846094,

        -0.2766430466277988,

        -0.2723305229501465,

        -0.2680125218144679,

        -0.26368913006989675,

        -0.2593604346739895,

        -0.2550265226909762,

        -0.25068748129000984,

        -0.2463433977434125,

        -0.2419943594249205,

        -0.2376404538079268,

        -0.23328176846372162,

        -0.22891839105973116,

        -0.22455040935775433,

        -0.22017791121219743,

        -0.21580098456830737,

        -0.21141971746040256,

        -0.2070341980101023,

        -0.20264451442455458,

        -0.19825075499466163,

        -0.19385300809330427,

        -0.18945136217356448,

        -0.1850459057669462,

        -0.18063672748159476,

        -0.17622391600051465,

        -0.17180756007978581,

        -0.16738774854677843,

        -0.16296457029836645,

        -0.1585381142991394,

        -0.1541084695796131,

        -0.1496757252344391,

        -0.14523997042061235,

        -0.14080129435567837,

        -0.13635978631593854,

        -0.1319155356346544,

        -0.12746863170025122,

        -0.12301916395451969,

        -0.11856722189081717,

        -0.1141128950522677,

        -0.10965627302996091,

        -0.10519744546115009,

        -0.10073650202744931,

        -0.09627353245302958,

        -0.09180862650281425,

        -0.0873418739806735,

        -0.08287336472761814,

        -0.07840318861999258,

        -0.07393143556766713,

        -0.06945819551222959,

        -0.06498355842517631,

        -0.06050761430610249,

        -0.05603045318089202,

        -0.05155216509990677,

        -0.04707284013617538,

        -0.042592568383581594,

        -0.03811143995505217,

        -0.03362954498074444,

        -0.02914697360623348,

        -0.02466381599069896,

        -0.0201801623051118,

        -0.015696102730420505,

        -0.011211727455737343,

        -0.006727126676524341,

        -0.0022423905927791508,

        0.0022423905927791508,

        0.006727126676524341,

        0.011211727455737343,

        0.015696102730420505,

        0.0201801623051118,

        0.02466381599069896,

        0.02914697360623348,

        0.03362954498074444,

        0.03811143995505217,

        0.042592568383581594,

        0.04707284013617538,

        0.05155216509990677,

        0.05603045318089202,

        0.06050761430610249,

        0.06498355842517631,

        0.06945819551222959,

        0.07393143556766713,

        0.07840318861999258,

        0.08287336472761814,

        0.0873418739806735,

        0.09180862650281425,

        0.09627353245302958,

        0.10073650202744931,

        0.10519744546115009,

        0.10965627302996091,

        0.1141128950522677,

        0.11856722189081717,

        0.12301916395451969,

        0.12746863170025122,

        0.1319155356346544,

        0.13635978631593854,

        0.14080129435567837,

        0.14523997042061235,

        0.1496757252344391,

        0.1541084695796131,

        0.1585381142991394,

        0.16296457029836645,

        0.16738774854677843,

        0.17180756007978581,

        0.17622391600051465,

        0.18063672748159476,

        0.1850459057669462,

        0.18945136217356448,

        0.19385300809330427,

        0.19825075499466163,

        0.20264451442455458,

        0.2070341980101023,

        0.21141971746040256,

        0.21580098456830737,

        0.22017791121219743,

        0.22455040935775433,

        0.22891839105973116,

        0.23328176846372162,

        0.2376404538079268,

        0.2419943594249205,

        0.2463433977434125,

        0.25068748129000984,

        0.2550265226909762,

        0.2593604346739895,

        0.26368913006989675,

        0.2680125218144679,

        0.2723305229501465,

        0.2766430466277988,

        0.28095000610846094,

        0.28525131476508303,

        0.28954688608427187,

        0.29383663366803087,

        0.2981204712354977,

        0.3023983126246799,

        0.3066700717941879,

        0.3109356628249652,

        0.315194999922017,

        0.31944799741613544,

        0.32369456976562283,

        0.32793463155801217,

        0.33216809751178517,

        0.33639488247808724,

        0.34061490144244055,

        0.34482806952645356,

        0.34903430198952834,

        0.35323351423056504,

        0.3574256217896635,

        0.3616105403498218,

        0.3657881857386326,

        0.3699584739299755,

        0.37412132104570767,

        0.37827664335735056,

        0.382424357287774,

        0.38656437941287747,

        0.3906966264632676,

        0.3948210153259333,

        0.3989374630459174,

        0.403045886827985,

        0.4071462040382889,

        0.4112383322060317,

        0.4153221890251242,

        0.4193976923558413,

        0.42346476022647384,

        0.4275233108349773,

        0.4315732625506172,

        0.435614533915611,

        0.4396470436467663,

        0.443670710637116,

        0.4476854539575493,

        0.4516911928584396,

        0.45568784677126883,

        0.45967533531024757,

        0.4636535782739321,

        0.46762249564683755,

        0.4715820076010471,

        0.4755320344978178,

        0.47947249688918214,

        0.48340331551954613,

        0.48732441132728344,

        0.49123570544632544,

        0.4951371192077476,

        0.49902857414135166,

        0.502909991977244,

        0.50678129464741,

        0.5106424042872837,

        0.514493243237315,

        0.5183337340445305,

        0.5221637994640919,

        0.5259833624608496,

        0.5297923462108922,

        0.5335906741030915,

        0.5373782697406433,

        0.5411550569426044,

        0.5449209597454245,

        0.5486759024044742,

        0.5524198093955686,

        0.5561526054164858,

        0.5598742153884823,

        0.5635845644578025,

        0.5672835779971843,

        0.5709711816073605,

        0.5746473011185544,

        0.5783118625919726,

        0.5819647923212915,

        0.5856060168341399,

        0.5892354628935769,

        0.5928530574995645,

        0.5964587278904367,

        0.6000524015443625,

        0.6036340061808039,

        0.6072034697619709,

        0.6107607204942699,

        0.6143056868297472,

        0.6178382974675288,

        0.6213584813552545,

        0.6248661676905061,

        0.6283612859222325,

        0.6318437657521683,

        0.6353135371362474,

        0.6387705302860124,

        0.642214675670018,

        0.6456459040152295,

        0.649064146308416,

        0.6524693337975387,

        0.6558613979931336,

        0.6592402706696892,

        0.6626058838670184,

        0.6659581698916257,

        0.6692970613180688,

        0.6726224909903145,

        0.6759343920230895,

        0.6792326978032257,

        0.6825173419910001,

        0.685788258521469,

        0.6890453816057966,

        0.6922886457325791,

        0.6955179856691608,

        0.6987333364629477,

        0.7019346334427128,

        0.7051218122198978,

        0.7082948086899071,

        0.7114535590333981,

        0.7145979997175642,

        0.717728067497413,

        0.7208436994170383,

        0.7239448328108862,

        0.7270314053050153,

        0.7301033548183523,

        0.7331606195639391,

        0.7362031380501768,

        0.7392308490820619,

        0.7422436917624174,

        0.7452416054931172,

        0.7482245299763055,

        0.7511924052156093,

        0.754145171517345,

        0.7570827694917192,

        0.7600051400540233,

        0.7629122244258218,

        0.7658039641361346,

        0.7686803010226125,

        0.7715411772327082,

        0.7743865352248385,

        0.7772163177695428,

        0.7800304679506336,

        0.7828289291663413,

        0.7856116451304528,

        0.7883785598734436,

        0.7911296177436036,

        0.7938647634081557,

        0.7965839418543701,

        0.7992870983906695,

        0.8019741786477299,

        0.8046451285795736,

        0.807299894464657,

        0.8099384229069501,

        0.8125606608370113,

        0.8151665555130546,

        0.8177560545220103,

        0.8203291057805788,

        0.8228856575362792,

        0.8254256583684891,

        0.8279490571894798,

        0.8304558032454428,

        0.8329458461175118,

        0.8354191357227757,

        0.8378756223152868,

        0.8403152564870607,

        0.8427379891690706,

        0.8451437716322336,

        0.8475325554883916,

        0.8499042926912838,

        0.8522589355375133,

        0.8545964366675072,

        0.8569167490664679,

        0.85921982606532,

        0.8615056213416481,

        0.8637740889206288,

        0.8660251831759557,

        0.8682588588307564,

        0.8704750709585036,

        0.8726737749839192,

        0.8748549266838697,

        0.8770184821882564,

        0.8791643979808981,

        0.8812926309004055,

        0.8834031381410501,

        0.8854958772536243,

        0.8875708061462964,

        0.8896278830854557,

        0.8916670666965535,

        0.8936883159649339,

        0.8956915902366598,

        0.8976768492193296,

        0.8996440529828883,

        0.9015931619604308,

        0.9035241369489969,

        0.9054369391103606,

        0.9073315299718105,

        0.9092078714269246,

        0.9110659257363358,

        0.9129056555284913,

        0.9147270238004048,

        0.9165299939183995,

        0.9183145296188465,

        0.9200805950088927,

        0.9218281545671838,

        0.9235571731445781,

        0.925267615964854,

        0.9269594486254087,

        0.9286326370979512,

        0.9302871477291856,

        0.9319229472414889,

        0.9335400027335797,

        0.9351382816811805,

        0.9367177519376712,

        0.938278381734736,

        0.9398201396830029,

        0.9413429947726741,

        0.9428469163741503,

        0.9443318742386466,

        0.9457978384988011,

        0.9472447796692749,

        0.9486726686473463,

        0.9500814767134955,

        0.9514711755319818,

        0.9528417371514146,

        0.9541931340053146,

        0.9555253389126688,

        0.9568383250784773,

        0.9581320660942916,

        0.9594065359387465,

        0.9606617089780829,

        0.9618975599666639,

        0.963114064047482,

        0.9643111967526596,

        0.9654889340039409,

        0.9666472521131758,

        0.9677861277827974,

        0.9689055381062893,

        0.9700054605686473,

        0.9710858730468319,

        0.9721467538102133,

        0.9731880815210083,

        0.9742098352347098,

        0.9752119944005082,

        0.9761945388617038,

        0.9771574488561137,

        0.9781007050164678,

        0.9790242883707998,

        0.9799281803428275,

        0.9808123627523271,

        0.9816768178154993,

        0.9825215281453259,

        0.9833464767519208,

        0.9841516470428707,

        0.9849370228235697,

        0.9857025882975444,

        0.9864483280667723,

        0.9871742271319912,

        0.9878802708930013,

        0.9885664451489585,

        0.9892327360986609,

        0.9898791303408258,

        0.9905056148743601,

        0.9911121770986216,

        0.9916988048136738,

        0.99226548622053,

        0.9928122099213931,

        0.9933389649198844,

        0.9938457406212662,

        0.9943325268326559,

        0.9947993137632332,

        0.9952460920244388,

        0.9956728526301664,

        0.9960795869969472,

        0.9964662869441292,

        0.9968329446940483,

        0.997179552872197,

        0.9975061045073889,

        0.9978125930319236,

        0.9980990122817561,

        0.9983653564966798,

        0.9986116203205365,

        0.9988377988014838,

        0.9990438873923717,

        0.9992298819513438,

        0.9993957787429115,

        0.9995415744401039,

        0.9996672661292814,

        0.9997728513224007,

        0.999858327993772,

        0.9999236947182248,

        0.9999689514123065,

        0.9999941072178984};

    double weights[700] = {

        1.5122766970721705e-05,

        3.5202627699226865e-05,

        5.531151383659113e-05,

        7.542187000755848e-05,

        9.553122768788137e-05,

        0.0001156388192455874,

        0.00013574414394490076,

        0.00015584676466225508,

        0.00017594626390492757,

        0.00019604223142456121,

        0.00021613426002851572,

        0.00023622194400338062,

        0.0002563048784030642,

        0.0002763826587517759,

        0.000296454880875876,

        0.0003165211408461622,

        0.00033658103491433663,

        0.0003566341595125428,

        0.000376680111235824,

        0.00039671848684784264,

        0.0004167488832701861,

        0.00043677089760313104,

        0.000456784127120975,

        0.0004767881692719134,

        0.0004967826216998271,

        0.0005167670822460575,

        0.0005367411489455139,

        0.0005567044200488067,

        0.0005766564940261293,

        0.0005965969695761019,

        0.0006165254456204917,

        0.000636441521336423,

        0.0006563447961401627,

        0.0006762348697135755,

        0.0006961113419964153,

        0.0007159738132120471,

        0.0007358218838550778,

        0.000755655154717593,

        0.0007754732268886492,

        0.0007952757017583849,

        0.0008150621810354906,

        0.0008348322667478075,

        0.000854585561252121,

        0.0008743216672500209,

        0.00089404018777718,

        0.0009137407262342765,

        0.0009334228863767954,

        0.0009530862723312226,

        0.0009727304886038213,

        0.000992355140083162,

        0.001011959832056507,

        0.0010315441702046415,

        0.0010511077606258077,

        0.001070650209831678,

        0.0010901711247580574,

        0.00110967011277633,

        0.0011291467816986237,

        0.001148600739784595,

        0.001168031595750279,

        0.0011874389587793932,

        0.001206822438525531,

        0.0012261816451227645,

        0.0012455161891960795,

        0.0012648256818623457,

        0.0012841097347457667,

        0.0013033679599795964,

        0.0013225999702198923,

        0.0013418053786461268,

        0.001360983798975193,

        0.0013801348454676825,

        0.0013992581329304492,

        0.0014183532767347718,

        0.0014374198928122338,

        0.0014564575976716938,

        0.0014754660084038435,

        0.0014944447426855387,

        0.0015133934187926618,

        0.0015323116556060353,

        0.0015511990726180204,

        0.0015700552899394137,

        0.0015888799283116624,

        0.0016076726091094032,

        0.0016264329543487397,

        0.0016451605866994602,

        0.0016638551294871275,

        0.0016825162067036071,

        0.001701143443012352,

        0.0017197364637603866,

        0.0017382948949797637,

        0.0017568183634000371,

        0.0017753064964540935,

        0.001793758922285615,

        0.0018121752697536188,

        0.0018305551684480955,

        0.0018488982486864474,

        0.001867204141531276,

        0.0018854724787899673,

        0.001903702893026656,

        0.0019218950175690249,

        0.00194004848651254,

        0.0019581629347326323,

        0.0019762379978873106,

        0.00199427331242906,

        0.0020122685156088184,

        0.002030223245482789,

        0.0020481371409235335,

        0.002066009841623414,

        0.0020838409881049225,

        0.0021016302217242064,

        0.0021193771846826377,

        0.0021370815200301304,

        0.0021547428716743385,

        0.0021723608843877648,

        0.0021899352038152347,

        0.0022074654764788473,

        0.002224951349787646,

        0.0022423924720438903,

        0.0022597884924493404,

        0.002277139061112354,

        0.002294443829057376,

        0.0023117024482285273,

        0.0023289145714978374,

        0.0023460798526743413,

        0.0023631979465067983,

        0.002380268508695495,

        0.0023972911958946032,

        0.00241426566572252,

        0.002431191576767339,

        0.0024480685885933653,

        0.002464896361748501,

        0.002481674557771382,

        0.0024984028391979037,

        0.002515080869566804,

        0.0025317083134290745,

        0.002548284836351996,

        0.002564810104927507,

        0.0025812837867784572,

        0.002597705550565467,

        0.0026140750659924073,

        0.0026303920038149523,

        0.0026466560358462954,

        0.0026628668349640773,

        0.002679024075114757,

        0.0026951274313248962,

        0.002711176579701935,

        0.002727171197445814,

        0.0027431109628517766,

        0.0027589955553199564,

        0.0027748246553582854,

        0.0027905979445919603,

        0.0028063151057688626,

        0.002821975822765205,

        0.002837579780592964,

        0.002853126665404908,

        0.002868616164503185,

        0.0028840479663421884,

        0.002899421760538873,

        0.002914737237875319,

        0.002929994090307375,

        0.002945192010969757,

        0.002960330694182708,

        0.0029754098354575933,

        0.0029904291315033847,

        0.0030053882802331846,

        0.0030202869807697064,

        0.003035124933450887,

        0.0030499018398370036,

        0.0030646174027161234,

        0.0030792713261106708,

        0.003093863315281266,

        0.0031083930767364463,

        0.003122860318234251,

        0.0031372647487913196,

        0.003151606078687454,

        0.003165884019471858,

        0.003180098283968175,

        0.003194248586280963,

        0.0032083346418013696,

        0.003222356167212834,

        0.003236312880496369,

        0.0032502045009372717,

        0.0032640307491288885,

        0.0032777913469806156,

        0.0032914860177218237,

        0.003305114485907769,

        0.0033186764774253102,

        0.0033321717194983356,

        0.003345599940693273,

        0.0033589608709249583,

        0.0033722542414613256,

        0.003385479784929078,

        0.0033986372353192176,

        0.003411726327992353,

        0.003424746799684322,

        0.0034376983885104533,

        0.0034505808339719344,

        0.003463393876960637,

        0.003476137259764544,

        0.0034888107260724693,

        0.003501414020979375,

        0.0035139468909916563,

        0.003526409084032824,

        0.0035388003494467007,

        0.0035511204380048247,

        0.003563369101909967,

        0.0035755460948011138,

        0.003587651171759194,

        0.0035996840893115743,

        0.003611644605436796,

        0.0036235324795697117,

        0.0036353474726065066,

        0.0036470893469089122,

        0.0036587578663091185,

        0.0036703527961152683,

        0.0036818739031153993,

        0.0036933209555824894,

        0.0037046937232784643,

        0.0037159919774600505,

        0.0037272154908820003,

        0.003738364037803215,

        0.003749437393989893,

        0.0037604353367200944,

        0.0037713576447898464,

        0.0037822040985152714,

        0.003792974479738998,

        0.0038036685718333034,

        0.003814286159704926,

        0.0038248270297996426,

        0.003835290970105707,

        0.003845677770159486,

        0.0038559872210482717,

        0.0038662191154149503,

        0.0038763732474631878,

        0.0038864494129596384,

        0.0038964474092399435,

        0.00390636703521166,

        0.003916208091358574,

        0.003925970379744848,

        0.00393565370401891,

        0.003945257869417547,

        0.003954782682769311,

        0.003964227952499253,

        0.003973593488632026,

        0.003982879102796025,

        0.003992084608227222,

        0.004001209819772702,

        0.004010254553894653,

        0.004019218628673802,

        0.00402810186381332,

        0.00403690408064225,

        0.004045625102119345,

        0.0040542647528360645,

        0.0040628228590209895,

        0.004071299248542531,

        0.004079693750912697,

        0.004088006197290595,

        0.004096236420485804,

        0.004104384254961475,

        0.004112449536838084,

        0.004120432103896435,

        0.004128331795580911,

        0.004136148453002902,

        0.004143881918943843,

        0.00415153203785836,

        0.0041590986558776325,

        0.004166581620812181,

        0.00417398078215502,

        0.004181295991084904,

        0.004188527100468963,

        0.004195673964865954,

        0.004202736440529047,

        0.004209714385408761,

        0.004216607659155777,

        0.0042234161231238,

        0.0042301396403722595,

        0.004236778075669369,

        0.004243331295494342,

        0.004249799168040591,

        0.004256181563217966,

        0.0042624783526556105,

        0.004268689409704443,

        0.004274814609439918,

        0.004280853828664116,

        0.004286806945908575,

        0.004292673841436698,

        0.004298454397245934,

        0.004304148497070433,

        0.00430975602638316,

        0.004315276872398413,

        0.004320710924073947,

        0.00432605807211312,

        0.004331318208967262,

        0.0043364912288379135,

        0.004341577027678615,

        0.00434657550319736,

        0.004351486554858438,

        0.004356310083884536,

        0.004361045993258706,

        0.00436569418772629,

        0.004370254573796878,

        0.00437472705974623,

        0.004379111555617984,

        0.004383407973225563,

        0.004387616226153979,

        0.004391736229761501,

        0.004395767901181326,

        0.00439971115932339,

        0.004403565924875867,

        0.004407332120306773,

        0.004411009669865621,

        0.004414598499584862,

        0.004418098537281347,

        0.004421509712557909,

        0.00442483195680462,

        0.004428065203200307,

        0.004431209386713784,

        0.0044342644441052025,

        0.004437230313927418,

        0.004440106936527023,

        0.00444289425404577,

        0.004445592210421576,

        0.004448200751389683,

        0.004450719824483822,

        0.00445314937903718,

        0.004455489366183443,

        0.0044577397388578625,

        0.004459900451798025,

        0.004461971461544939,

        0.0044639527264438445,

        0.004465844206645006,

        0.0044676458641045545,

        0.004469357662585292,

        0.004470979567657323,

        0.004472511546698811,

        0.004473953568896678,

        0.004475305605247147,

        0.00447656762855632,

        0.004477739613440772,

        0.0044788215363280775,

        0.004479813375457201,

        0.004480715110879029,

        0.004481526724456701,

        0.004482248199866006,

        0.0044828795225957405,

        0.0044834206799479115,

        0.004483871661038081,

        0.0044842324567955566,

        0.004484503059963531,

        0.004484683465099297,

        0.004484773668574318,

        0.004484773668574318,

        0.004484683465099297,

        0.004484503059963531,

        0.0044842324567955566,

        0.004483871661038081,

        0.0044834206799479115,

        0.0044828795225957405,

        0.004482248199866006,

        0.004481526724456701,

        0.004480715110879029,

        0.004479813375457201,

        0.0044788215363280775,

        0.004477739613440772,

        0.00447656762855632,

        0.004475305605247147,

        0.004473953568896678,

        0.004472511546698811,

        0.004470979567657323,

        0.004469357662585292,

        0.0044676458641045545,

        0.004465844206645006,

        0.0044639527264438445,

        0.004461971461544939,

        0.004459900451798025,

        0.0044577397388578625,

        0.004455489366183443,

        0.00445314937903718,

        0.004450719824483822,

        0.004448200751389683,

        0.004445592210421576,

        0.00444289425404577,

        0.004440106936527023,

        0.004437230313927418,

        0.0044342644441052025,

        0.004431209386713784,

        0.004428065203200307,

        0.00442483195680462,

        0.004421509712557909,

        0.004418098537281347,

        0.004414598499584862,

        0.004411009669865621,

        0.004407332120306773,

        0.004403565924875867,

        0.00439971115932339,

        0.004395767901181326,

        0.004391736229761501,

        0.004387616226153979,

        0.004383407973225563,

        0.004379111555617984,

        0.00437472705974623,

        0.004370254573796878,

        0.00436569418772629,

        0.004361045993258706,

        0.004356310083884536,

        0.004351486554858438,

        0.00434657550319736,

        0.004341577027678615,

        0.0043364912288379135,

        0.004331318208967262,

        0.00432605807211312,

        0.004320710924073947,

        0.004315276872398413,

        0.00430975602638316,

        0.004304148497070433,

        0.004298454397245934,

        0.004292673841436698,

        0.004286806945908575,

        0.004280853828664116,

        0.004274814609439918,

        0.004268689409704443,

        0.0042624783526556105,

        0.004256181563217966,

        0.004249799168040591,

        0.004243331295494342,

        0.004236778075669369,

        0.0042301396403722595,

        0.0042234161231238,

        0.004216607659155777,

        0.004209714385408761,

        0.004202736440529047,

        0.004195673964865954,

        0.004188527100468963,

        0.004181295991084904,

        0.00417398078215502,

        0.004166581620812181,

        0.0041590986558776325,

        0.00415153203785836,

        0.004143881918943843,

        0.004136148453002902,

        0.004128331795580911,

        0.004120432103896435,

        0.004112449536838084,

        0.004104384254961475,

        0.004096236420485804,

        0.004088006197290595,

        0.004079693750912697,

        0.004071299248542531,

        0.0040628228590209895,

        0.0040542647528360645,

        0.004045625102119345,

        0.00403690408064225,

        0.00402810186381332,

        0.004019218628673802,

        0.004010254553894653,

        0.004001209819772702,

        0.003992084608227222,

        0.003982879102796025,

        0.003973593488632026,

        0.003964227952499253,

        0.003954782682769311,

        0.003945257869417547,

        0.00393565370401891,

        0.003925970379744848,

        0.003916208091358574,

        0.00390636703521166,

        0.0038964474092399435,

        0.0038864494129596384,

        0.0038763732474631878,

        0.0038662191154149503,

        0.0038559872210482717,

        0.003845677770159486,

        0.003835290970105707,

        0.0038248270297996426,

        0.003814286159704926,

        0.0038036685718333034,

        0.003792974479738998,

        0.0037822040985152714,

        0.0037713576447898464,

        0.0037604353367200944,

        0.003749437393989893,

        0.003738364037803215,

        0.0037272154908820003,

        0.0037159919774600505,

        0.0037046937232784643,

        0.0036933209555824894,

        0.0036818739031153993,

        0.0036703527961152683,

        0.0036587578663091185,

        0.0036470893469089122,

        0.0036353474726065066,

        0.0036235324795697117,

        0.003611644605436796,

        0.0035996840893115743,

        0.003587651171759194,

        0.0035755460948011138,

        0.003563369101909967,

        0.0035511204380048247,

        0.0035388003494467007,

        0.003526409084032824,

        0.0035139468909916563,

        0.003501414020979375,

        0.0034888107260724693,

        0.003476137259764544,

        0.003463393876960637,

        0.0034505808339719344,

        0.0034376983885104533,

        0.003424746799684322,

        0.003411726327992353,

        0.0033986372353192176,

        0.003385479784929078,

        0.0033722542414613256,

        0.0033589608709249583,

        0.003345599940693273,

        0.0033321717194983356,

        0.0033186764774253102,

        0.003305114485907769,

        0.0032914860177218237,

        0.0032777913469806156,

        0.0032640307491288885,

        0.0032502045009372717,

        0.003236312880496369,

        0.003222356167212834,

        0.0032083346418013696,

        0.003194248586280963,

        0.003180098283968175,

        0.003165884019471858,

        0.003151606078687454,

        0.0031372647487913196,

        0.003122860318234251,

        0.0031083930767364463,

        0.003093863315281266,

        0.0030792713261106708,

        0.0030646174027161234,

        0.0030499018398370036,

        0.003035124933450887,

        0.0030202869807697064,

        0.0030053882802331846,

        0.0029904291315033847,

        0.0029754098354575933,

        0.002960330694182708,

        0.002945192010969757,

        0.002929994090307375,

        0.002914737237875319,

        0.002899421760538873,

        0.0028840479663421884,

        0.002868616164503185,

        0.002853126665404908,

        0.002837579780592964,

        0.002821975822765205,

        0.0028063151057688626,

        0.0027905979445919603,

        0.0027748246553582854,

        0.0027589955553199564,

        0.0027431109628517766,

        0.002727171197445814,

        0.002711176579701935,

        0.0026951274313248962,

        0.002679024075114757,

        0.0026628668349640773,

        0.0026466560358462954,

        0.0026303920038149523,

        0.0026140750659924073,

        0.002597705550565467,

        0.0025812837867784572,

        0.002564810104927507,

        0.002548284836351996,

        0.0025317083134290745,

        0.002515080869566804,

        0.0024984028391979037,

        0.002481674557771382,

        0.002464896361748501,

        0.0024480685885933653,

        0.002431191576767339,

        0.00241426566572252,

        0.0023972911958946032,

        0.002380268508695495,

        0.0023631979465067983,

        0.0023460798526743413,

        0.0023289145714978374,

        0.0023117024482285273,

        0.002294443829057376,

        0.002277139061112354,

        0.0022597884924493404,

        0.0022423924720438903,

        0.002224951349787646,

        0.0022074654764788473,

        0.0021899352038152347,

        0.0021723608843877648,

        0.0021547428716743385,

        0.0021370815200301304,

        0.0021193771846826377,

        0.0021016302217242064,

        0.0020838409881049225,

        0.002066009841623414,

        0.0020481371409235335,

        0.002030223245482789,

        0.0020122685156088184,

        0.00199427331242906,

        0.0019762379978873106,

        0.0019581629347326323,

        0.00194004848651254,

        0.0019218950175690249,

        0.001903702893026656,

        0.0018854724787899673,

        0.001867204141531276,

        0.0018488982486864474,

        0.0018305551684480955,

        0.0018121752697536188,

        0.001793758922285615,

        0.0017753064964540935,

        0.0017568183634000371,

        0.0017382948949797637,

        0.0017197364637603866,

        0.001701143443012352,

        0.0016825162067036071,

        0.0016638551294871275,

        0.0016451605866994602,

        0.0016264329543487397,

        0.0016076726091094032,

        0.0015888799283116624,

        0.0015700552899394137,

        0.0015511990726180204,

        0.0015323116556060353,

        0.0015133934187926618,

        0.0014944447426855387,

        0.0014754660084038435,

        0.0014564575976716938,

        0.0014374198928122338,

        0.0014183532767347718,

        0.0013992581329304492,

        0.0013801348454676825,

        0.001360983798975193,

        0.0013418053786461268,

        0.0013225999702198923,

        0.0013033679599795964,

        0.0012841097347457667,

        0.0012648256818623457,

        0.0012455161891960795,

        0.0012261816451227645,

        0.001206822438525531,

        0.0011874389587793932,

        0.001168031595750279,

        0.001148600739784595,

        0.0011291467816986237,

        0.00110967011277633,

        0.0010901711247580574,

        0.001070650209831678,

        0.0010511077606258077,

        0.0010315441702046415,

        0.001011959832056507,

        0.000992355140083162,

        0.0009727304886038213,

        0.0009530862723312226,

        0.0009334228863767954,

        0.0009137407262342765,

        0.00089404018777718,

        0.0008743216672500209,

        0.000854585561252121,

        0.0008348322667478075,

        0.0008150621810354906,

        0.0007952757017583849,

        0.0007754732268886492,

        0.000755655154717593,

        0.0007358218838550778,

        0.0007159738132120471,

        0.0006961113419964153,

        0.0006762348697135755,

        0.0006563447961401627,

        0.000636441521336423,

        0.0006165254456204917,

        0.0005965969695761019,

        0.0005766564940261293,

        0.0005567044200488067,

        0.0005367411489455139,

        0.0005167670822460575,

        0.0004967826216998271,

        0.0004767881692719134,

        0.000456784127120975,

        0.00043677089760313104,

        0.0004167488832701861,

        0.00039671848684784264,

        0.000376680111235824,

        0.0003566341595125428,

        0.00033658103491433663,

        0.0003165211408461622,

        0.000296454880875876,

        0.0002763826587517759,

        0.0002563048784030642,

        0.00023622194400338062,

        0.00021613426002851572,

        0.00019604223142456121,

        0.00017594626390492757,

        0.00015584676466225508,

        0.00013574414394490076,

        0.0001156388192455874,

        9.553122768788137e-05,

        7.542187000755848e-05,

        5.531151383659113e-05,

        3.5202627699226865e-05,

        1.5122766970721705e-05};

    // convert to postfix
    _POSTFIX__ P_function = submodule_Parse(I_function);
    if (P_function.size <= 0 || P_function.tokens == NULL)
        return -3;

    double sum = 0.0;
    double _A_ = (b - a) / 2.0;
    double _B_ = (a + b) / 2.0;
    for (unsigned short int i = 0; i < 700; i++)
    {
        sum += weights[i] * ni_eval_P_function(P_function, var, _A_ * nodes[i] + _B_);
    }

    (*result) = sign * sum * _A_;

    // clean up
    if (P_function.tokens != NULL)
        free(P_function.tokens);

    return 0;
}

// =============================================================================================================================== //
// Adaptive Quadrature
// =============================================================================================================================== //
/*
Apdative Quadrature method

Good for general cases with extreme precision
However it takes much time for moderate or extreme "oscillatory" functions (E.g: sin(100x) or cos(1000x))

@param I_function: Function to integrate (infix type)
@param var: Integrate with respect to
@param a, b: Lower & upper bounds
@param result: (double type) Pointer to a memory cell that stores the integral
@param tolerance: The desired error in result

Returns:

0  : If the integral is found

-1 : Invalid I_function

-2 : Invalid variable to integrate (E.g: 'c' 'e' 'g')

-3 : a or b is not finite

-4 : Failed to convert infix to postfix

-5 : Lower & upper bounds are the singularities

References:

https://sites.millersville.edu/rbuchanan/math375/Adaptive.pdf

https://en.wikipedia.org/wiki/Adaptive_quadrature

https://math.libretexts.org/Bookshelves/Calculus/CLP-2_Integral_Calculus_(Feldman_Rechnitzer_and_Yeager)/04%3A_Appendices/4.03%3A_C%3A_More_About_Numerical_Integration/4.3.03%3A_C.3%3A_Adaptive_Quadrature
*/
short int ni_integral_aq(const __INFIX__ I_function, const char var, const double a, const double b, double *result, const double tolerance)
{
    // check for valid parameters
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return -1;

    if (var == '\0' || var == 'c' || var == 'e' || var == 'g')
        return -2;

    if (!isfinite(a) || !isfinite(b))
        return -3;

    char exception[2] = {var, '\0'};
    short int substitude_status = ni_substitude_variables(&I_function, exception);

    // convert to postfix
    _POSTFIX__ P_function = submodule_Parse(I_function);
    if (P_function.size <= 0 || P_function.tokens == NULL)
        return -4;

    if (!isfinite(ni_eval_P_function(P_function, var, a)) || !isfinite(ni_eval_P_function(P_function, var, b)))
        return -5;

    // init simpson estimate on [a, b]
    double SE_ab = ni_simpson_estimate(P_function, var, a, b);

    short int status = ni_recurse(P_function, var, a, b, result, tolerance, SE_ab);
    if (status < 0)
    {
        if (P_function.tokens != NULL)
            free(P_function.tokens);
        *result = NAN;
        return status;
    }

    // clean up
    if (P_function.tokens != NULL)
        free(P_function.tokens);
    return 0;
}

double ni_simpson_estimate(const _POSTFIX__ P_function, const char var, const double a, const double b)
{
    double c = (a + b) / 2.0;
    return ((b - a) / 6.0) * (ni_eval_P_function(P_function, var, a) + 4.0 * ni_eval_P_function(P_function, var, c) + ni_eval_P_function(P_function, var, b));
}

short int ni_recurse(const _POSTFIX__ P_function, const char var, const double a, const double b, double *result, const double tolerance, const double simpson_estimate)
{
    double c = (a + b) / 2.0;

    // Apply simpson estimate on subintervals
    double SE_ac = ni_simpson_estimate(P_function, var, a, c);
    double SE_cb = ni_simpson_estimate(P_function, var, c, b);

    if (!isfinite(SE_ac) || !isfinite(SE_cb))
    {
        *result = NAN;
        return -6;
    }

    double error = SE_ac + SE_cb - simpson_estimate;

    // check if error match with the given tolerance
    if (fabs(error) < 15.0 * tolerance)
    {
        // apply Richardson extrapolation to enhance preccision
        *result = SE_ac + SE_cb + error / 15.0;
        return 0;
    }

    // else
    // split tolerance evenly between halves
    double left, right;
    ni_recurse(P_function, var, a, c, &left, tolerance / 2.0, SE_ac);
    ni_recurse(P_function, var, c, b, &right, tolerance / 2.0, SE_cb);

    if (!isfinite(left) || !isfinite(right))
    {
        *result = NAN;
        return -7;
    }

    *result = left + right;
    return 0;
}

// =============================================================================================================================== //
// Double Exponential (Tanh-Sinh) Quadrature
// =============================================================================================================================== //

/* Double Exponential (Tanh-Sinh) quadrature integration

Best for integral that have singularties at endpoints, semifinite and infinite interval


  @param I_function: infix expression to integrate
  @param var: variable of integration
  @param a,b: integration limits
  @param result: pointer to store result
  @param error: pointer to store error estimate

Returns:

  -1: invalid expression

  -2: contains invalid functions

  -3: invalid variable

References:

https://en.wikipedia.org/wiki/Tanh-sinh_quadrature

https://github.com/Robert-van-Engelen/Tanh-Sinh

*/
short int ni_integral_quad(const __INFIX__ I_function, const char var, const double a, const double b, double *result, double *error)
{
    // check for valid parameters
    if (I_function.tokens == NULL || I_function.size <= 0)
        return -1;
    if (var == '\0' || var == 'e' || var == 'c' || var == 'g')
        return -3;

    // pre-calculation

    // check for valid functions in the I_function expression
    for (unsigned short int i = 0; i < I_function.size; i++)
    {
        if (I_function.tokens[i].operator== '\0')
            continue;
        if (I_function.tokens[i].operator== SPECIFIER_OF_INTEGRAL ||
            I_function.tokens[i]
                .operator== SPECIFIER_OF_DIF ||
            I_function.tokens[i]
                .operator== SPECIFIER_OF_SIGMA_SUM ||
            I_function.tokens[i]
                .operator== SPECIFIER_OF_PRODUCT_OF_SEQUENCE)
        {
            return -2;
        }
    }

    // substitude variables
    char exception[2] = {var, '\0'};
    short int substitude_status = ni_substitude_variables(&I_function, exception);
    if (substitude_status == -1)
        return -1;

    // decide accuracy
    double epsilon = 1e-12;
    const int max_iteration = 1000;

    // start the computing section
    (*result) = quad(I_function, var, a, b, max_iteration, epsilon, error);

    return 0;
}

double exp_sinh_opt_d(const _POSTFIX__ P_function, const char var, /* double (*___function___)(double), */ double a, double eps, double d)
{
    int ev = 2;
    // const double base = 2; // 2 or 3 or exp(1) for example
    // double h2 = ___function___(a + d / 2) - ___function___(a + d * 2) * 4;
    double h2 = ni_eval_P_function(P_function, var, a + d / 2) - ni_eval_P_function(P_function, var, a + d * 2) * 4;
    int i = 1, j = 32; // j=32 is optimal to search for r
    if (isfinite(h2) && fabs(h2) > 1e-5)
    { // if |h2| > 2^-16
        double r, fl, fr, h, s = 0, lfl, lfr, lr = 2;
        do
        { // find max j such that fl and fr are finite
            j /= 2;
            r = 1 << (i + j);
            // fl = ___function___(a + d / r);
            fl = ni_eval_P_function(P_function, var, a + d / r);
            // fr = ___function___(a + d * r) * r * r;
            fr = ni_eval_P_function(P_function, var, a + d * r) * r * r;
            ev += 2;
            h = fl - fr;
        } while (j > 1 && !isfinite(h));
        if (j > 1 && isfinite(h) && sign(h) != sign(h2))
        {
            lfl = fl; // last fl=___function___(a+d/r)
            lfr = fr; // last fr=___function___(a+d*r)*r*r
            do
            { // bisect in 4 iterations
                j /= 2;
                r = 1 << (i + j);
                // fl = ___function___(a + d / r);
                fl = ni_eval_P_function(P_function, var, a + d / r);
                // fr = ___function___(a + d * r) * r * r;
                fr = ni_eval_P_function(P_function, var, a + d * r) * r * r;
                ev += 2;
                h = fl - fr;
                if (isfinite(h))
                {
                    s += fabs(h); // sum |h| to remove noisy cases
                    if (sign(h) == sign(h2))
                    {
                        i += j; // search right half
                    }
                    else
                    {             // search left half
                        lfl = fl; // record last fl=___function___(a+d/r)
                        lfr = fr; // record last fr=___function___(a+d*r)*r*r
                        lr = r;   // record last r
                    }
                }
            } while (j > 1);
            if (s > eps)
            {                  // if sum of |h| > eps
                h = lfl - lfr; // use last fl and fr before the sign change
                r = lr;        // use last r before the sign change
                if (h != 0)    // if last difference was nonzero, back up r by one step
                    r /= 2;
                if (fabs(lfl) < fabs(lfr))
                    d /= r; // move d closer to the finite endpoint
                else
                    d *= r; // move d closer to the infinite endpoint
            }
        }
    }
    return d;
}

/* integrate function, range a..b, max levels n (2 to 7, 6 is recommended), relative error tolerance eps, estimated relative error err


  @param I_function: infix expression to integrate
  @param var: variable of integration
  @param a,b: integration limits
  @param n: maximum number of iterations (recommended: 6)
  @param eps: relative error tolerance
  @param err: pointer to store estimated relative error

Returns:
  result of integration */
double quad(const __INFIX__ I_function, const char var, /* double (*___function___)(double), */ double a, double b, int n, double eps, double *err)
{
    // turn infix to postfix
    _POSTFIX__ P_function = submodule_Parse(I_function);

    const double tol = FUDGE1 * eps;
    double c = 0, d = 1, s, sign = 1, e, v, h = 2;
    int k = 0, mode = 0; // Tanh-Sinh = 0, Exp-Sinh = 1, Sinh-Sinh = 2
    if (b < a)
    { // swap bounds
        v = b;
        b = a;
        a = v;
        sign = -1;
    }
    if (isfinite(a) && isfinite(b))
    {
        c = (a + b) / 2;
        d = (b - a) / 2;
        v = c;
    }
    else if (isfinite(a))
    {
        mode = 1; // Exp-Sinh
        // d = exp_sinh_opt_d(___function___, a, eps, d);
        d = exp_sinh_opt_d(P_function, var, a, eps, d);
        c = a;
        v = a + d;
    }
    else if (isfinite(b))
    {
        mode = 1; // Exp-Sinh
        // d = exp_sinh_opt_d(___function___, b, eps, -d);
        d = exp_sinh_opt_d(P_function, var, b, eps, -d);
        sign = -sign;
        c = b;
        v = b + d;
    }
    else
    {
        mode = 2; // Sinh-Sinh
        v = 0;
    }
    // s = ___function___(v);
    s = ni_eval_P_function(P_function, var, v);
    do
    {
        double p = 0, q, fp = 0, fm = 0, t, eh;
        h /= 2;
        t = eh = exp(h);
        if (k > 0)
            eh *= eh;
        if (mode == 0)
        { // Tanh-Sinh
            do
            {
                double u = exp(1 / t - t);            // = exp(-2*sinh(j*h)) = 1/exp(sinh(j*h))^2
                double r = 2 * u / (1 + u);           // = 1 - tanh(sinh(j*h))
                double w = (t + 1 / t) * r / (1 + u); // = cosh(j*h)/cosh(sinh(j*h))^2
                double x = d * r;
                if (a + x > a)
                { // if too close to a then reuse previous fp
                    // double y = ___function___(a + x);
                    double y = ni_eval_P_function(P_function, var, a + x);
                    if (isfinite(y))
                        fp = y; // if ___function___(x) is finite, add to local sum
                }
                if (b - x < b)
                { // if too close to b then reuse previous fm
                    // double y = ___function___(b - x);
                    double y = ni_eval_P_function(P_function, var, b - x);
                    if (isfinite(y))
                        fm = y; // if ___function___(x) is finite, add to local sum
                }
                q = w * (fp + fm);
                p += q;
                t *= eh;
            } while (fabs(q) > eps * fabs(p));
        }
        else
        {
            t /= 2;
            do
            {
                double r = exp(t - .25 / t); // = exp(sinh(j*h))
                double x, y, w = r;
                q = 0;
                if (mode == 1)
                { // Exp-Sinh
                    x = c + d / r;
                    if (x == c) // if x hit the finite endpoint then break
                        break;
                    // y = ___function___(x);
                    y = ni_eval_P_function(P_function, var, x);
                    if (isfinite(y)) // if ___function___(x) is finite, add to local sum
                        q += y / w;
                }
                else
                {                        // Sinh-Sinh
                    r = (r - 1 / r) / 2; // = sinh(sinh(j*h))
                    w = (w + 1 / w) / 2; // = cosh(sinh(j*h))
                    x = c - d * r;
                    // y = ___function___(x);
                    y = ni_eval_P_function(P_function, var, x);
                    if (isfinite(y)) // if ___function___(x) is finite, add to local sum
                        q += y * w;
                }
                x = c + d * r;
                // y = ___function___(x);
                y = ni_eval_P_function(P_function, var, x);
                if (isfinite(y)) // if ___function___(x) is finite, add to local sum
                    q += y * w;
                q *= t + .25 / t; // q *= cosh(j*h)
                p += q;
                t *= eh;
            } while (fabs(q) > eps * fabs(p));
        }
        v = s - p;
        s += p;
        ++k;
    } while (fabs(v) > tol * fabs(s) && k <= n);
    // if the estimated relative error is desired, then return it
    if (err != NULL)
        *err = fabs(v) / (FUDGE2 * fabs(s) + eps);
    // result with estimated relative error err

    // clean up allocated memories
    if (P_function.tokens != NULL)
        free(P_function.tokens);

    return sign * d * s * h;
}

// =============================================================================================================================== //
// Simpson's Rule
// =============================================================================================================================== //

double ni_integral_simpson(const __INFIX__ I_function, const char var, const double a, const double b)
{
    unsigned int n = 1000000;

    double delta = (b - a) / (double)n;

    _POSTFIX__ P_function = submodule_Parse(I_function);

    double sum = ni_eval_P_function(P_function, var, a);

    double step = 2.0 * delta;

    // 4f(x)
    double f_4 = 0.0;
    double stop = b - delta;
    for (double t = a + delta; t <= stop; t += step)
    {
        f_4 += ni_eval_P_function(P_function, var, t);
    }

    // 2f(x)
    double f_2 = 0.0;
    stop = b - 2.0 * delta;
    for (double t = a + step; t <= stop; t += step)
    {
        f_2 += ni_eval_P_function(P_function, var, t);
    }

    sum = delta / 3.0 * (ni_eval_P_function(P_function, var, a) + 4.0 * f_4 + 2.0 * f_2 + ni_eval_P_function(P_function, var, b));

    free(P_function.tokens);

    return sum;
}

// =============================================================================================================================== //
// =============================================================================================================================== //
// =============================================================================================================================== //

double ni_eval_P_function(const _POSTFIX__ P_function, const char var, const double value)
{
    // Make a copy of P_function
    _POSTFIX__ cloned_exp = copy_postfix_expression(P_function);

    // substitude var
    for (unsigned short int i = 0; i < cloned_exp.size; i++)
    {
        if (cloned_exp.tokens[i].variable == var)
        {
            cloned_exp.tokens[i].num = value;
            cloned_exp.tokens[i].variable = '\0';
        }
    }

    for (unsigned short int i = 0; i < cloned_exp.size && cloned_exp.size > 1; i++)
    {
        char OP = cloned_exp.tokens[i].operator;

        if (OP == '\0')
            continue;

        bool two_param_OP = false;

        switch (OP)
        {
        case '+': // addition
            cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num + cloned_exp.tokens[i - 1].num;
            two_param_OP = true;
            break;
        case '-': // substraction
            cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num - cloned_exp.tokens[i - 1].num;
            two_param_OP = true;
            break;
        case '*': // multiplication
            cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num * cloned_exp.tokens[i - 1].num;
            two_param_OP = true;
            break;
        case '/': // division
        {
            if (cloned_exp.tokens[i - 1].num == 0.0)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num / cloned_exp.tokens[i - 1].num;
            two_param_OP = true;
            break;
        }
        case '%': // remainder modulo
        {
            if (!is_integer(cloned_exp.tokens[i - 2].num) || !is_integer(cloned_exp.tokens[i - 1].num))
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 2].num = (double)(((int)cloned_exp.tokens[i - 2].num) % ((int)cloned_exp.tokens[i - 1].num));
            two_param_OP = true;
            break;
        }
        case '^': // exponential
            cloned_exp.tokens[i - 2].num = pow(cloned_exp.tokens[i - 2].num, cloned_exp.tokens[i - 1].num);
            two_param_OP = true;
            break;
        case SPECIFIER_OF_SIN: // sin
            cloned_exp.tokens[i - 1].num = sin(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_SINH: // sinh
            cloned_exp.tokens[i - 1].num = sinh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_SEC: // sec
            cloned_exp.tokens[i - 1].num = 1 / cos(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_SECH: // sech
            cloned_exp.tokens[i - 1].num = 1 / cosh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCSEC: // arcsec
            cloned_exp.tokens[i - 1].num = arcsec(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCSECH: // arcsech
            cloned_exp.tokens[i - 1].num = arcsech(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_COS: // cos
            cloned_exp.tokens[i - 1].num = cos(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_COSH: // cosh
            cloned_exp.tokens[i - 1].num = cosh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_CSC: // csc
            cloned_exp.tokens[i - 1].num = 1 / sin(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_CSCH: // csch
            cloned_exp.tokens[i - 1].num = csch(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCCSC: // arccsc
            cloned_exp.tokens[i - 1].num = arccsc(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCCSCH: // arccsch
            cloned_exp.tokens[i - 1].num = arccsch(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_TAN: // tan
            cloned_exp.tokens[i - 1].num = tan(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_TANH: // tanh
            cloned_exp.tokens[i - 1].num = tanh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_COT: // cot
            cloned_exp.tokens[i - 1].num = 1 / tan(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_COTH: // coth
            cloned_exp.tokens[i - 1].num = coth(cloned_exp.tokens[i - 1].num);
            break;
        case '!': // factorial
        {
            // Check if it's an integer or not
            if (!is_integer(cloned_exp.tokens[i - 1].num) || cloned_exp.tokens[i - 1].num < 0)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            double fac = 1.0;
            double n = cloned_exp.tokens[i - 1].num;
            for (double f = 1.0; f <= n; f++)
                fac *= f;
            if (fac > __DBL_MAX__)
                cloned_exp.tokens[i - 1].num = NAN;
            else
                cloned_exp.tokens[i - 1].num = (double)fac;
            break;
        }
        case SPECIFIER_OF_ARCSIN: // arcsin
            cloned_exp.tokens[i - 1].num = asin(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCSINH: // arcsinh
            cloned_exp.tokens[i - 1].num = asinh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCCOS: // arccos
            cloned_exp.tokens[i - 1].num = acos(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCCOSH: // arccosh
            cloned_exp.tokens[i - 1].num = acosh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCTAN: // arctan
            cloned_exp.tokens[i - 1].num = atan(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCTANH: // arctanh
            cloned_exp.tokens[i - 1].num = atanh(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_ARCCOT: // arccot
        {
            if (cloned_exp.tokens[i - 1].num > 0.0)
                cloned_exp.tokens[i - 1].num = atan(1.0 / (cloned_exp.tokens[i - 1].num));
            else
                cloned_exp.tokens[i - 1].num = atan(1.0 / (cloned_exp.tokens[i - 1].num)) + PI;
            break;
        }
        case SPECIFIER_OF_ARCCOTH: // arccoth
            cloned_exp.tokens[i - 1].num = arccoth(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_LN: // ln
        {
            if (cloned_exp.tokens[i - 1].num <= 0.0)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 1].num = log(cloned_exp.tokens[i - 1].num);
            break;
        }
        case SPECIFIER_OF_LG: // log10
        {
            if (cloned_exp.tokens[i - 1].num <= 0.0)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 1].num = log10(cloned_exp.tokens[i - 1].num);
            break;
        }
        case SPECIFIER_OF_SQRT: // sqrt
        {
            if (cloned_exp.tokens[i - 1].num < 0.0)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 1].num = sqrt(cloned_exp.tokens[i - 1].num);
            break;
        }
        case SPECIFIER_OF_ABS: // abs
        {
            if (cloned_exp.tokens[i - 1].num < 0.0)
                cloned_exp.tokens[i - 1].num = -cloned_exp.tokens[i - 1].num;
            break;
        }
        case SPECIFIER_OF_CBRT: // cuberoot
            cloned_exp.tokens[i - 1].num = cbrt(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_GAMMA: // gamma function
        {
            if (cloned_exp.tokens[i - 1].num < 0.0)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 1].num = gamma_function(cloned_exp.tokens[i - 1].num);
            break;
        }
        case SPECIFIER_OF_CEIL: // ceiling function
            cloned_exp.tokens[i - 1].num = ceil(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_FLOOR: // floor function
            cloned_exp.tokens[i - 1].num = floor(cloned_exp.tokens[i - 1].num);
            break;
        case SPECIFIER_OF_LAMBERTW: // lambert W function
        {
            if (cloned_exp.tokens[i - 1].num < -1.0 / EULER_NUMBER)
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            cloned_exp.tokens[i - 1].num = lambertw_real(cloned_exp.tokens[i - 1].num);
            break;
        }
        default:
        {
            free(cloned_exp.tokens);
            return NAN;
        }
        }

        // after completing 1 calculation

        // 2 parameter operator
        if (two_param_OP)
        {
            // shift the array 2 index down
            for (unsigned short int k = i - 1; k < cloned_exp.size; k++)
            {
                cloned_exp.tokens[k].num = cloned_exp.tokens[k + 2].num;
                cloned_exp.tokens[k].variable = cloned_exp.tokens[k + 2].variable;
                cloned_exp.tokens[k].operator= cloned_exp.tokens[k + 2].operator;
            }

            cloned_exp.size -= 2;
        }

        // 1 parameter operator & function
        else
        {
            for (unsigned short int k = i; k < cloned_exp.size; k++)
            {
                cloned_exp.tokens[k].num = cloned_exp.tokens[k + 1].num;
                cloned_exp.tokens[k].variable = cloned_exp.tokens[k + 1].variable;
                cloned_exp.tokens[k].operator= cloned_exp.tokens[k + 1].operator;
            }

            cloned_exp.size--;
        }

        // reset index to the starting of the array
        i = -1;
    }

    double result = cloned_exp.tokens[0].num;
    free(cloned_exp.tokens);

    return result;
}

short int ni_substitude_variables(__INFIX__ *I_expression, const char *exceptions)
{
    if (I_expression == NULL || I_expression->tokens == NULL)
        return -1;
    unsigned short int num_of_exception = strlen(exceptions);
    for (unsigned short int i = 0; i < I_expression->size; i++)
    {
        if (I_expression->tokens[i].variable != '\0')
        {
            bool is_exception = false;
            for (unsigned short int e = 0; e < num_of_exception; e++)
            {
                if (I_expression->tokens[i].variable == exceptions[e])
                {
                    is_exception = true;
                    break;
                }
            }

            if (!is_exception)
            {
                I_expression->tokens[i].num = variable_set[index_table[I_expression->tokens[i].variable]].num;
                I_expression->tokens[i].variable = '\0';
            }
        }
    }
    return 0;
}

void ni_decide_integration_method(const __INFIX__ I_function, const char var, const double a, const double b, short int *conclusion)
{
    // check for improper integral & singularities at endpoints
    if (isinf(a) || isinf(b) || !isfinite(evaluate_I_1_var_function(I_function, var, a)) || !isfinite(evaluate_I_1_var_function(I_function, var, b)))
    {
        (*conclusion) = DBL_TANH_SINH_QUADRATURE;
        return;
    }

    // Calculate the average slope
    double average_slope = 0.0;
    short int nodes = 1000;
    double distance = b - a;
    double step = distance / (double)nodes;

    // find the derivative of the function
    __INFIX__ I_derivative = differentiate_I_exp(I_function, var);
    // parse to postfix type
    _POSTFIX__ P_derivative = submodule_Parse(I_derivative);

    for (double x = a; x <= b; x += step)
    {
        average_slope += fabs(ni_eval_P_function(P_derivative, var, x));
    }

    average_slope /= (double)nodes;

    // check
    // printf("Aver = %.15g\n", average_slope);

    // decide wich method to use
    if (average_slope <= 60 && distance <= 20.0)
    {
        (*conclusion) = GAUSSIAN_QUADRATURE_700;
    }
    else if (average_slope > 60 && distance > 10.0 && distance <= 20.0)
    {
        (*conclusion) = ADAPTIVE_QUADRATURE;
    }

    else
        (*conclusion) = SIMPSON_RULE;

    free(P_derivative.tokens);
    free(I_derivative.tokens);
}

double ni_integrate(const __INFIX__ I_function, const char var, const double a, const double b, unsigned short int *method)
{
    // check for valid function
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return NAN;
    // check for valid var
    if (var <= 0 || var == 'c' || var == 'e' || var == 'g')
        return NAN;
    // check for valid bounds
    if (a == b)
        return 0.0;

    // decide lower & upper bound
    short int s = sign(b - a);

    double l_bound = (a < b) ? a : b;
    double u_bound = (a < b) ? b : a;

    double result = NAN;
    double error;

    short int status = 0;
    short int decided_method = *method;

    // decide method to integrate
    switch (decided_method)
    {
    // Gaussian Quadrature 1000
    case GAUSSIAN_QUADRATURE_700:
        status = ni_integral_GaussianQuadrature700(I_function, var, l_bound, u_bound, &result);
        break;
    // Double Tanh-Sinh Quadrature
    case DBL_TANH_SINH_QUADRATURE:
        status = ni_integral_quad(I_function, var, l_bound, u_bound, &result, &error);
        break;
    // Adaptive Quadrature
    case ADAPTIVE_QUADRATURE:
        status = ni_integral_aq(I_function, var, l_bound, u_bound, &result, 1e-15);
        break;
    // Simpson rule
    case SIMPSON_RULE:
        result = ni_integral_simpson(I_function, var, a, b);
        break;
    // Let the calculator decide
    case 0:
    {
        ni_decide_integration_method(I_function, var, l_bound, u_bound, &decided_method);
        switch (decided_method)
        {
        case GAUSSIAN_QUADRATURE_700:
            status = ni_integral_GaussianQuadrature700(I_function, var, l_bound, u_bound, &result);
            break;
        case DBL_TANH_SINH_QUADRATURE:
            status = ni_integral_quad(I_function, var, l_bound, u_bound, &result, &error);
            break;
        case ADAPTIVE_QUADRATURE:
            status = ni_integral_aq(I_function, var, l_bound, u_bound, &result, 1e-15);
            break;
        case SIMPSON_RULE:
            result = ni_integral_simpson(I_function, var, a, b);
            break;
        default:
            break;
        }
        break;
    }
    default:
        break;
    }

    (*method) = decided_method;

    if (status == 0)
        return s * result;

    // Handle errors here

    return NAN;
}

#endif