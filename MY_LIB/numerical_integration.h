#ifndef NUMERICAL_INTEGRATION
#define NUMERICAL_INTEGRATION

#include <MY_LIB/global_var.h>
#include <MY_LIB/my_calculator.h>
#include <MY_LIB/inputsDisplays.h>

// ------------------------------quad.c------------------------------ //

// Use these macores for better optimization
// #define FUDGE1 160
// #define FUDGE2 16

#define FUDGE1 10
#define FUDGE2 1

#define sign(x) (((x) > 0) - ((x) < 0))

// ------------------------------------------------------------------ //

// =============================================================================================================================== //
// =============================================================================================================================== //
// =============================================================================================================================== //

double ni_eval_P_function(const _POSTFIX__, const char, const double);
short int ni_substitude_variables(__INFIX__ *I_expression, const char *exceptions);

short int ni_integral_quad(const __INFIX__, const char, const double, const double, double *, double *);
double quad(const __INFIX__ I_function, const char var, /* double (*___function___)(double), */ double a, double b, int n, double eps, double *err);
double exp_sinh_opt_d(const _POSTFIX__ P_function, const char var, /* double (*___function___)(double), */ double a, double eps, double d);

short int ni_integral_aq(const __INFIX__ I_function, const char var, const double a, const double b, double *result, const double tolerance);
short int ni_recurse(const _POSTFIX__ P_function, const char var, const double a, const double b, double *result, const double tolerance, const double simpson_estimate);
double ni_simpson_estimate(const _POSTFIX__ P_function, const char var, const double a, const double b);

short int ni_integral_GauussianQuadrature1000(const __INFIX__ I_function, const char var, const double a, const double b, double *result);
double ni_integral_GaussianQuadrature500(const __INFIX__ I_function, const char var, double a, double b);

// =============================================================================================================================== //
// =============================================================================================================================== //
// =============================================================================================================================== //

// =============================================================================================================================== //
// Gaussian Quadrature
// =============================================================================================================================== //

/*
Gaussian Quadrature method with 500 weights and nodes

Best for general cases, fast, handle moderate oscillatory functions (E.g sin(100x))

@param I_function: Function to integrate (infix type)
@param var: Integrate with respect to
@param a, b: Lower & upper bounds
@param result: (double type) Pointer to a memory cell that stores the integral

Returns: The result of the integral

References:

https://math.okstate.edu/people/yqwang/teaching/math4513_fall12/Notes/gaussian.pdf

https://pomax.github.io/bezierinfo/legendre-gauss.html
*/
double ni_integral_GaussianQuadrature500(const __INFIX__ I_function, const char var, double a, double b)
{
    // check for valid parameter
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return NAN;
    if (var == '\0' || var == 'c' || var == 'e' || var == 'g')
        return NAN;
    if (is_zero(b - a))
        return 0.0;

    double sign = 1.0;

    if (b < a)
    {
        double temp = b;
        b = a;
        a = temp;

        sign = -1.0;
    }

    // Gaussâ€“Legendre weights and nodes for n = 500
    double weights[500] = {
        2.962364450555644e-05,
        6.89570728205074e-05,
        0.0001083460286934494,
        0.00014773577476858758,
        0.0001871207158557841,
        0.00022649858871036835,
        0.00026586765326214174,
        0.00030522629426960014,
        0.00034457293521267176,
        0.00038390601413328845,
        0.0004232239754797741,
        0.00046252526700028325,
        0.0005018083384640074,
        0.0005410716410692871,
        0.0005803136271951402,
        0.000619532750301983,
        0.0006587274648936571,
        0.0006978962265239956,
        0.0007370374918303779,
        0.0007761497185724115,
        0.0008152313656796535,
        0.0008542808933021158,
        0.000893296762876444,
        0.000932277437164903,
        0.0009712213803292163,
        0.0010101270579808048,
        0.0010489929372477008,
        0.001087817486819288,
        0.0011265991770259313,
        0.001165336479880678,
        0.0012040278691495142,
        0.0012426718204084238,
        0.001281266811103743,
        0.0013198113206112235,
        0.0013583038302951032,
        0.0013967428235689707,
        0.001435126785955902,
        0.0014734542051496194,
        0.0015117235710660469,
        0.0015499333759148874,
        0.0015880821142481758,
        0.0016261682830269436,
        0.0016641903816764746,
        0.0017021469121446798,
        0.0017400363789658421,
        0.0017778572893161115,
        0.0018156081530703236,
        0.001853287482865466,
        0.0018908937941571266,
        0.0019284256052762908,
        0.001965881437489857,
        0.0020032598150595254,
        0.002040559265296426,
        0.0020777783186228162,
        0.002114915508628639,
        0.0021519693721285143,
        0.002188938449221406,
        0.002225821283344368,
        0.0022626164213351667,
        0.0022993224134848934,
        0.0023359378135980493,
        0.002372461179047586,
        0.0024088910708330792,
        0.0024452260536369447,
        0.0024814646958799965,
        0.002517605569780819,
        0.002553647251408836,
        0.0025895883207401,
        0.002625427361717593,
        0.002661162962301729,
        0.0026967937145305747,
        0.002732318214571503,
        0.0027677350627784056,
        0.002803042863747332,
        0.0028382402263707513,
        0.0028733257638912033,
        0.0029082980939583803,
        0.002943155838680796,
        0.0029778976246835577,
        0.00301252208315887,
        0.003047027849922231,
        0.003081413565465014,
        0.0031156778750098773,
        0.0031498194285608304,
        0.0031838368809594727,
        0.003217728891937881,
        0.003251494126168959,
        0.0032851312533203917,
        0.0033186389481087075,
        0.003352015890349023,
        0.0033852607650076893,
        0.0034183722622554867,
        0.0034513490775173413,
        0.0034841899115251916,
        0.003516893470368367,
        0.0035494584655435877,
        0.00358188361400878,
        0.0036141676382310047,
        0.003646309266237613,
        0.0036783072316653666,
        0.0037101602738126944,
        0.0037418671376866883,
        0.003773426574055361,
        0.003804837339493149,
        0.003836098196433851,
        0.003867207913216991,
        0.0038981652641361577,
        0.003928969029489261,
        0.003959617995624746,
        0.003990110954990722,
        0.004020446706180627,
        0.004050624053982821,
        0.004080641809426447,
        0.004110498789828243,
        0.004140193818840072,
        0.004169725726493957,
        0.0041990933492489805,
        0.004228295530036822,
        0.004257331118307547,
        0.0042861989700751614,
        0.004314897947962083,
        0.004343426921244604,
        0.004371784765896552,
        0.0043999703646348965,
        0.0044279826069618155,
        0.00445582038921107,
        0.004483482614589362,
        0.004510968193219391,
        0.0045382760421856716,
        0.00456540508557294,
        0.004592354254512642,
        0.004619122487221592,
        0.004645708729046646,
        0.004672111932504433,
        0.004698331057323403,
        0.004724365070484263,
        0.004750212946261073,
        0.004775873666261864,
        0.004801346219468435,
        0.004826629602276515,
        0.0048517228185342275,
        0.00487662487958296,
        0.004901334804294899,
        0.004925851619113117,
        0.004950174358088109,
        0.004974302062917719,
        0.004998233782983438,
        0.005021968575388622,
        0.0050455055049957115,
        0.005068843644462379,
        0.005091982074279162,
        0.005114919882804143,
        0.0051376561663007345,
        0.005160190028971686,
        0.005182520582995276,
        0.005204646948559886,
        0.005226568253898823,
        0.005248283635325007,
        0.005269792237264015,
        0.005291093212288935,
        0.005312185721152992,
        0.0053330689328232265,
        0.005353742024512282,
        0.005374204181711729,
        0.0053944545982239096,
        0.005414492476193589,
        0.005434317026139524,
        0.0054539274669850564,
        0.005473323026089905,
        0.005492502939279499,
        0.005511466450875798,
        0.005530212813727121,
        0.005548741289236881,
        0.005567051147393393,
        0.005585141666798403,
        0.005603012134695254,
        0.005620661846997398,
        0.005638090108315948,
        0.005655296231986928,
        0.005672279540098546,
        0.005689039363517814,
        0.005705575041916978,
        0.005721885923799338,
        0.005737971366525118,
        0.005753830736336728,
        0.005769463408383799,
        0.005784868766747513,
        0.005800046204465446,
        0.005814995123554662,
        0.005829714935036055,
        0.005844205058957262,
        0.0058584649244152655,
        0.005872493969579246,
        0.005886291641712568,
        0.005899857397194459,
        0.0059131907015417305,
        0.005926291029429498,
        0.005939157864711969,
        0.0059517907004430015,
        0.005964189038895738,
        0.0059763523915825675,
        0.005988280279274043,
        0.0059999722320179675,
        0.006011427789157794,
        0.006022646499350913,
        0.0060336279205863005,
        0.006044371620201972,
        0.006054877174902154,
        0.006065144170773736,
        0.006075172203302678,
        0.006084960877390096,
        0.00609450980736758,
        0.006103818617012571,
        0.0061128869395630355,
        0.0061217144177320906,
        0.006130300703721955,
        0.006138645459237711,
        0.006146748355500514,
        0.006154609073260782,
        0.006162227302810531,
        0.006169602743995684,
        0.0061767351062279605,
        0.0061836241084962116,
        0.006190269479377487,
        0.006196670957047914,
        0.0062028282892927005,
        0.006208741233516407,
        0.0062144095567522924,
        0.006219833035671499,
        0.006225011456591944,
        0.006229944615486749,
        0.006234632317992107,
        0.006239074379415165,
        0.006243270624741095,
        0.006247220888640169,
        0.006250925015474178,
        0.006254382859302553,
        0.006257594283888137,
        0.0062605591627025725,
        0.006263277378931298,
        0.006265748825478026,
        0.006267973404969174,
        0.006269951029757515,
        0.006271681621925733,
        0.0062731651132894245,
        0.006274401445399896,
        0.006275390569546302,
        0.006276132446757668,
        0.006276627047804515,
        0.006276874353199775,
        0.006276874353199775,
        0.006276627047804515,
        0.006276132446757668,
        0.006275390569546302,
        0.006274401445399896,
        0.0062731651132894245,
        0.006271681621925733,
        0.006269951029757515,
        0.006267973404969174,
        0.006265748825478026,
        0.006263277378931298,
        0.0062605591627025725,
        0.006257594283888137,
        0.006254382859302553,
        0.006250925015474178,
        0.006247220888640169,
        0.006243270624741095,
        0.006239074379415165,
        0.006234632317992107,
        0.006229944615486749,
        0.006225011456591944,
        0.006219833035671499,
        0.0062144095567522924,
        0.006208741233516407,
        0.0062028282892927005,
        0.006196670957047914,
        0.006190269479377487,
        0.0061836241084962116,
        0.0061767351062279605,
        0.006169602743995684,
        0.006162227302810531,
        0.006154609073260782,
        0.006146748355500514,
        0.006138645459237711,
        0.006130300703721955,
        0.0061217144177320906,
        0.0061128869395630355,
        0.006103818617012571,
        0.00609450980736758,
        0.006084960877390096,
        0.006075172203302678,
        0.006065144170773736,
        0.006054877174902154,
        0.006044371620201972,
        0.0060336279205863005,
        0.006022646499350913,
        0.006011427789157794,
        0.0059999722320179675,
        0.005988280279274043,
        0.0059763523915825675,
        0.005964189038895738,
        0.0059517907004430015,
        0.005939157864711969,
        0.005926291029429498,
        0.0059131907015417305,
        0.005899857397194459,
        0.005886291641712568,
        0.005872493969579246,
        0.0058584649244152655,
        0.005844205058957262,
        0.005829714935036055,
        0.005814995123554662,
        0.005800046204465446,
        0.005784868766747513,
        0.005769463408383799,
        0.005753830736336728,
        0.005737971366525118,
        0.005721885923799338,
        0.005705575041916978,
        0.005689039363517814,
        0.005672279540098546,
        0.005655296231986928,
        0.005638090108315948,
        0.005620661846997398,
        0.005603012134695254,
        0.005585141666798403,
        0.005567051147393393,
        0.005548741289236881,
        0.005530212813727121,
        0.005511466450875798,
        0.005492502939279499,
        0.005473323026089905,
        0.0054539274669850564,
        0.005434317026139524,
        0.005414492476193589,
        0.0053944545982239096,
        0.005374204181711729,
        0.005353742024512282,
        0.0053330689328232265,
        0.005312185721152992,
        0.005291093212288935,
        0.005269792237264015,
        0.005248283635325007,
        0.005226568253898823,
        0.005204646948559886,
        0.005182520582995276,
        0.005160190028971686,
        0.0051376561663007345,
        0.005114919882804143,
        0.005091982074279162,
        0.005068843644462379,
        0.0050455055049957115,
        0.005021968575388622,
        0.004998233782983438,
        0.004974302062917719,
        0.004950174358088109,
        0.004925851619113117,
        0.004901334804294899,
        0.00487662487958296,
        0.0048517228185342275,
        0.004826629602276515,
        0.004801346219468435,
        0.004775873666261864,
        0.004750212946261073,
        0.004724365070484263,
        0.004698331057323403,
        0.004672111932504433,
        0.004645708729046646,
        0.004619122487221592,
        0.004592354254512642,
        0.00456540508557294,
        0.0045382760421856716,
        0.004510968193219391,
        0.004483482614589362,
        0.00445582038921107,
        0.0044279826069618155,
        0.0043999703646348965,
        0.004371784765896552,
        0.004343426921244604,
        0.004314897947962083,
        0.0042861989700751614,
        0.004257331118307547,
        0.004228295530036822,
        0.0041990933492489805,
        0.004169725726493957,
        0.004140193818840072,
        0.004110498789828243,
        0.004080641809426447,
        0.004050624053982821,
        0.004020446706180627,
        0.003990110954990722,
        0.003959617995624746,
        0.003928969029489261,
        0.0038981652641361577,
        0.003867207913216991,
        0.003836098196433851,
        0.003804837339493149,
        0.003773426574055361,
        0.0037418671376866883,
        0.0037101602738126944,
        0.0036783072316653666,
        0.003646309266237613,
        0.0036141676382310047,
        0.00358188361400878,
        0.0035494584655435877,
        0.003516893470368367,
        0.0034841899115251916,
        0.0034513490775173413,
        0.0034183722622554867,
        0.0033852607650076893,
        0.003352015890349023,
        0.0033186389481087075,
        0.0032851312533203917,
        0.003251494126168959,
        0.003217728891937881,
        0.0031838368809594727,
        0.0031498194285608304,
        0.0031156778750098773,
        0.003081413565465014,
        0.003047027849922231,
        0.00301252208315887,
        0.0029778976246835577,
        0.002943155838680796,
        0.0029082980939583803,
        0.0028733257638912033,
        0.0028382402263707513,
        0.002803042863747332,
        0.0027677350627784056,
        0.002732318214571503,
        0.0026967937145305747,
        0.002661162962301729,
        0.002625427361717593,
        0.0025895883207401,
        0.002553647251408836,
        0.002517605569780819,
        0.0024814646958799965,
        0.0024452260536369447,
        0.0024088910708330792,
        0.002372461179047586,
        0.0023359378135980493,
        0.0022993224134848934,
        0.0022626164213351667,
        0.002225821283344368,
        0.002188938449221406,
        0.0021519693721285143,
        0.002114915508628639,
        0.0020777783186228162,
        0.002040559265296426,
        0.0020032598150595254,
        0.001965881437489857,
        0.0019284256052762908,
        0.0018908937941571266,
        0.001853287482865466,
        0.0018156081530703236,
        0.0017778572893161115,
        0.0017400363789658421,
        0.0017021469121446798,
        0.0016641903816764746,
        0.0016261682830269436,
        0.0015880821142481758,
        0.0015499333759148874,
        0.0015117235710660469,
        0.0014734542051496194,
        0.001435126785955902,
        0.0013967428235689707,
        0.0013583038302951032,
        0.0013198113206112235,
        0.001281266811103743,
        0.0012426718204084238,
        0.0012040278691495142,
        0.001165336479880678,
        0.0011265991770259313,
        0.001087817486819288,
        0.0010489929372477008,
        0.0010101270579808048,
        0.0009712213803292163,
        0.000932277437164903,
        0.000893296762876444,
        0.0008542808933021158,
        0.0008152313656796535,
        0.0007761497185724115,
        0.0007370374918303779,
        0.0006978962265239956,
        0.0006587274648936571,
        0.000619532750301983,
        0.0005803136271951402,
        0.0005410716410692871,
        0.0005018083384640074,
        0.00046252526700028325,
        0.0004232239754797741,
        0.00038390601413328845,
        0.00034457293521267176,
        0.00030522629426960014,
        0.00026586765326214174,
        0.00022649858871036835,
        0.0001871207158557841,
        0.00014773577476858758,
        0.0001083460286934494,
        6.89570728205074e-05,
        2.962364450555644e-05};

    double nodes[500] = {
        -0.9999884567522129,
        -0.9999391798145371,
        -0.9998505288592006,
        -0.9997224876879449,
        -0.9995550589335447,
        -0.9993482486165864,
        -0.9991020646933555,
        -0.9988165167849478,
        -0.9984916161049857,
        -0.9981273754352638,
        -0.9977238091159455,
        -0.997280933040936,
        -0.9967987646553128,
        -0.9962773229536412,
        -0.9957166284786823,
        -0.9951167033202715,
        -0.9944775711142633,
        -0.9937992570414846,
        -0.9930817878266696,
        -0.992325191737358,
        -0.9915294985827499,
        -0.9906947397125084,
        -0.9898209480155092,
        -0.9889081579185339,
        -0.9879564053849051,
        -0.9869657279130641,
        -0.9859361645350886,
        -0.9848677558151522,
        -0.9837605438479229,
        -0.9826145722569035,
        -0.9814298861927109,
        -0.9802065323312958,
        -0.9789445588721034,
        -0.977644015536173,
        -0.9763049535641788,
        -0.9749274257144106,
        -0.9735114862606945,
        -0.9720571909902542,
        -0.9705645972015134,
        -0.9690337637018371,
        -0.9674647508052152,
        -0.9658576203298855,
        -0.9642124355958984,
        -0.9625292614226219,
        -0.9608081641261872,
        -0.9590492115168765,
        -0.957252472896451,
        -0.9554180190554201,
        -0.9535459222702526,
        -0.9516362563005288,
        -0.9496890963860347,
        -0.947704519243797,
        -0.9456826030650609,
        -0.9436234275122095,
        -0.9415270737156246,
        -0.9393936242704907,
        -0.9372231632335403,
        -0.9350157761197427,
        -0.9327715498989343,
        -0.930490572992392,
        -0.9281729352693497,
        -0.9258187280434574,
        -0.9234280440691834,
        -0.9210009775381599,
        -0.9185376240754719,
        -0.9160380807358894,
        -0.9135024460000439,
        -0.9109308197705482,
        -0.9083233033680599,
        -0.9056799995272898,
        -0.9030010123929542,
        -0.9002864475156713,
        -0.8975364118478033,
        -0.8947510137392416,
        -0.8919303629331384,
        -0.8890745705615831,
        -0.8861837491412231,
        -0.8832580125688314,
        -0.8802974761168184,
        -0.877302256428691,
        -0.8742724715144563,
        -0.8712082407459724,
        -0.8681096848522449,
        -0.864976925914671,
        -0.8618100873622285,
        -0.8586092939666133,
        -0.8553746718373237,
        -0.8521063484166915,
        -0.8488044524748606,
        -0.8454691141047138,
        -0.8421004647167475,
        -0.8386986370338935,
        -0.8352637650862903,
        -0.8317959842060023,
        -0.8282954310216877,
        -0.8247622434532156,
        -0.8211965607062316,
        -0.8175985232666736,
        -0.8139682728952365,
        -0.8103059526217874,
        -0.8066117067397293,
        -0.802885680800317,
        -0.7991280216069218,
        -0.7953388772092481,
        -0.7915183968974999,
        -0.7876667311964989,
        -0.7837840318597541,
        -0.7798704518634826,
        -0.7759261454005825,
        -0.7719512678745576,
        -0.7679459758933952,
        -0.7639104272633951,
        -0.7598447809829524,
        -0.7557491972362932,
        -0.7516238373871631,
        -0.7474688639724699,
        -0.7432844406958796,
        -0.7390707324213666,
        -0.7348279051667179,
        -0.7305561260969925,
        -0.7262555635179349,
        -0.7219263868693439,
        -0.7175687667183971,
        -0.7131828747529303,
        -0.7087688837746735,
        -0.704326967692442,
        -0.6998573015152848,
        -0.6953600613455899,
        -0.6908354243721447,
        -0.6862835688631563,
        -0.6817046741592265,
        -0.6770989206662871,
        -0.6724664898484908,
        -0.6678075642210626,
        -0.6631223273431083,
        -0.6584109638103826,
        -0.6536736592480159,
        -0.648910600303201,
        -0.6441219746378392,
        -0.6393079709211461,
        -0.6344687788222193,
        -0.6296045890025642,
        -0.624715593108583,
        -0.6198019837640233,
        -0.6148639545623893,
        -0.609901700059314,
        -0.604915415764894,
        -0.5999052981359867,
        -0.5948715445684692,
        -0.5898143533894622,
        -0.5847339238495148,
        -0.5796304561147554,
        -0.5745041512590039,
        -0.5693552112558506,
        -0.5641838389706982,
        -0.5589902381527688,
        -0.5537746134270766,
        -0.5485371702863653,
        -0.5432781150830126,
        -0.5379976550208994,
        -0.5326959981472461,
        -0.5273733533444159,
        -0.5220299303216851,
        -0.5166659396069802,
        -0.5112815925385833,
        -0.505877101256806,
        -0.5004526786956304,
        -0.4950085385743205,
        -0.4895448953890009,
        -0.48406196440420657,
        -0.4785599616444009,
        -0.4730391038854647,
        -0.4674996086461556,
        -0.46194169417953745,
        -0.45636557946438167,
        -0.45077148419653945,
        -0.4451596287802858,
        -0.4395302343196359,
        -0.4338835226096335,
        -0.42821971612761245,
        -0.4225390380244314,
        -0.41684171211568133,
        -0.4111279628728678,
        -0.4053980154145666,
        -0.3996520954975543,
        -0.3938904295079136,
        -0.38811324445211376,
        -0.38232076794806663,
        -0.3765132282161589,
        -0.37069085407026003,
        -0.36485387490870713,
        -0.35900252070526706,
        -0.35313702200007535,
        -0.3472576098905531,
        -0.34136451602230194,
        -0.33545797257997717,
        -0.32953821227813995,
        -0.32360546835208853,
        -0.3176599745486687,
        -0.3117019651170644,
        -0.3057316747995684,
        -0.2997493388223338,
        -0.2937551928861058,
        -0.2877494731569357,
        -0.28173241625687584,
        -0.27570425925465675,
        -0.269665239656347,
        -0.2636155953959953,
        -0.2575555648262563,
        -0.25148538670899967,
        -0.24540530020590262,
        -0.23931554486902742,
        -0.2332163606313831,
        -0.22710798779747213,
        -0.22099066703382264,
        -0.2148646393595063,
        -0.2087301461366422,
        -0.20258742906088745,
        -0.19643673015191443,
        -0.19027829174387526,
        -0.18411235647585422,
        -0.17793916728230763,
        -0.17175896738349253,
        -0.1655720002758839,
        -0.15937850972258097,
        -0.15317873974370322,
        -0.14697293460677596,
        -0.14076133881710645,
        -0.1345441971081505,
        -0.12832175443187002,
        -0.1220942559490822,
        -0.11586194701980015,
        -0.10962507319356599,
        -0.1033838801997762,
        -0.09713861393800015,
        -0.09088952046829167,
        -0.08463684600149451,
        -0.07838083688954174,
        -0.0721217396157496,
        -0.0658598007851062,
        -0.05959526711455543,
        -0.05332838542327645,
        -0.04705940262295916,
        -0.040788565708075965,
        -0.034516121746150395,
        -0.02824231786802273,
        -0.021967401258113205,
        -0.015691619144683082,
        -0.009415218790093976,
        -0.0031384474810658676,
        0.0031384474810658676,
        0.009415218790093976,
        0.015691619144683082,
        0.021967401258113205,
        0.02824231786802273,
        0.034516121746150395,
        0.040788565708075965,
        0.04705940262295916,
        0.05332838542327645,
        0.05959526711455543,
        0.0658598007851062,
        0.0721217396157496,
        0.07838083688954174,
        0.08463684600149451,
        0.09088952046829167,
        0.09713861393800015,
        0.1033838801997762,
        0.10962507319356599,
        0.11586194701980015,
        0.1220942559490822,
        0.12832175443187002,
        0.1345441971081505,
        0.14076133881710645,
        0.14697293460677596,
        0.15317873974370322,
        0.15937850972258097,
        0.1655720002758839,
        0.17175896738349253,
        0.17793916728230763,
        0.18411235647585422,
        0.19027829174387526,
        0.19643673015191443,
        0.20258742906088745,
        0.2087301461366422,
        0.2148646393595063,
        0.22099066703382264,
        0.22710798779747213,
        0.2332163606313831,
        0.23931554486902742,
        0.24540530020590262,
        0.25148538670899967,
        0.2575555648262563,
        0.2636155953959953,
        0.269665239656347,
        0.27570425925465675,
        0.28173241625687584,
        0.2877494731569357,
        0.2937551928861058,
        0.2997493388223338,
        0.3057316747995684,
        0.3117019651170644,
        0.3176599745486687,
        0.32360546835208853,
        0.32953821227813995,
        0.33545797257997717,
        0.34136451602230194,
        0.3472576098905531,
        0.35313702200007535,
        0.35900252070526706,
        0.36485387490870713,
        0.37069085407026003,
        0.3765132282161589,
        0.38232076794806663,
        0.38811324445211376,
        0.3938904295079136,
        0.3996520954975543,
        0.4053980154145666,
        0.4111279628728678,
        0.41684171211568133,
        0.4225390380244314,
        0.42821971612761245,
        0.4338835226096335,
        0.4395302343196359,
        0.4451596287802858,
        0.45077148419653945,
        0.45636557946438167,
        0.46194169417953745,
        0.4674996086461556,
        0.4730391038854647,
        0.4785599616444009,
        0.48406196440420657,
        0.4895448953890009,
        0.4950085385743205,
        0.5004526786956304,
        0.505877101256806,
        0.5112815925385833,
        0.5166659396069802,
        0.5220299303216851,
        0.5273733533444159,
        0.5326959981472461,
        0.5379976550208994,
        0.5432781150830126,
        0.5485371702863653,
        0.5537746134270766,
        0.5589902381527688,
        0.5641838389706982,
        0.5693552112558506,
        0.5745041512590039,
        0.5796304561147554,
        0.5847339238495148,
        0.5898143533894622,
        0.5948715445684692,
        0.5999052981359867,
        0.604915415764894,
        0.609901700059314,
        0.6148639545623893,
        0.6198019837640233,
        0.624715593108583,
        0.6296045890025642,
        0.6344687788222193,
        0.6393079709211461,
        0.6441219746378392,
        0.648910600303201,
        0.6536736592480159,
        0.6584109638103826,
        0.6631223273431083,
        0.6678075642210626,
        0.6724664898484908,
        0.6770989206662871,
        0.6817046741592265,
        0.6862835688631563,
        0.6908354243721447,
        0.6953600613455899,
        0.6998573015152848,
        0.704326967692442,
        0.7087688837746735,
        0.7131828747529303,
        0.7175687667183971,
        0.7219263868693439,
        0.7262555635179349,
        0.7305561260969925,
        0.7348279051667179,
        0.7390707324213666,
        0.7432844406958796,
        0.7474688639724699,
        0.7516238373871631,
        0.7557491972362932,
        0.7598447809829524,
        0.7639104272633951,
        0.7679459758933952,
        0.7719512678745576,
        0.7759261454005825,
        0.7798704518634826,
        0.7837840318597541,
        0.7876667311964989,
        0.7915183968974999,
        0.7953388772092481,
        0.7991280216069218,
        0.802885680800317,
        0.8066117067397293,
        0.8103059526217874,
        0.8139682728952365,
        0.8175985232666736,
        0.8211965607062316,
        0.8247622434532156,
        0.8282954310216877,
        0.8317959842060023,
        0.8352637650862903,
        0.8386986370338935,
        0.8421004647167475,
        0.8454691141047138,
        0.8488044524748606,
        0.8521063484166915,
        0.8553746718373237,
        0.8586092939666133,
        0.8618100873622285,
        0.864976925914671,
        0.8681096848522449,
        0.8712082407459724,
        0.8742724715144563,
        0.877302256428691,
        0.8802974761168184,
        0.8832580125688314,
        0.8861837491412231,
        0.8890745705615831,
        0.8919303629331384,
        0.8947510137392416,
        0.8975364118478033,
        0.9002864475156713,
        0.9030010123929542,
        0.9056799995272898,
        0.9083233033680599,
        0.9109308197705482,
        0.9135024460000439,
        0.9160380807358894,
        0.9185376240754719,
        0.9210009775381599,
        0.9234280440691834,
        0.9258187280434574,
        0.9281729352693497,
        0.930490572992392,
        0.9327715498989343,
        0.9350157761197427,
        0.9372231632335403,
        0.9393936242704907,
        0.9415270737156246,
        0.9436234275122095,
        0.9456826030650609,
        0.947704519243797,
        0.9496890963860347,
        0.9516362563005288,
        0.9535459222702526,
        0.9554180190554201,
        0.957252472896451,
        0.9590492115168765,
        0.9608081641261872,
        0.9625292614226219,
        0.9642124355958984,
        0.9658576203298855,
        0.9674647508052152,
        0.9690337637018371,
        0.9705645972015134,
        0.9720571909902542,
        0.9735114862606945,
        0.9749274257144106,
        0.9763049535641788,
        0.977644015536173,
        0.9789445588721034,
        0.9802065323312958,
        0.9814298861927109,
        0.9826145722569035,
        0.9837605438479229,
        0.9848677558151522,
        0.9859361645350886,
        0.9869657279130641,
        0.9879564053849051,
        0.9889081579185339,
        0.9898209480155092,
        0.9906947397125084,
        0.9915294985827499,
        0.992325191737358,
        0.9930817878266696,
        0.9937992570414846,
        0.9944775711142633,
        0.9951167033202715,
        0.9957166284786823,
        0.9962773229536412,
        0.9967987646553128,
        0.997280933040936,
        0.9977238091159455,
        0.9981273754352638,
        0.9984916161049857,
        0.9988165167849478,
        0.9991020646933555,
        0.9993482486165864,
        0.9995550589335447,
        0.9997224876879449,
        0.9998505288592006,
        0.9999391798145371,
        0.9999884567522129};

    _POSTFIX__ P_function = submodule_Parse(I_function);
    double sum = 0.0;
    double _A_ = (b - a) / 2.0;
    double _B_ = (b + a) / 2.0;
    for (unsigned short int i = 0; i < 500; i++)
    {
        sum += weights[i] * ni_eval_P_function(P_function, var, _A_ * nodes[i] + _B_);
    }

    free(P_function.tokens);

    sum *= sign * _A_;

    return sum;
}

/*
Gaussian Quadrature method with 1000 weights and nodes

Best for general cases, a lil bit slower than the 500 version, but handle strong oscillatory functions

@param I_function: Function to integrate (infix type)
@param var: Integrate with respect to
@param a, b: Lower & upper bounds
@param result: (double type) Pointer to a memory cell that stores the integral

Returns:

0  : If the integral is found

-1 : Invalid I_function

-2 : Invalid variable to integrate (E.g: 'c' 'e' 'g')

-3 : Failed to convert infxi to postfix

References:

https://math.okstate.edu/people/yqwang/teaching/math4513_fall12/Notes/gaussian.pdf

https://pomax.github.io/bezierinfo/legendre-gauss.html
*/
short int ni_integral_GauussianQuadrature1000(const __INFIX__ I_function, const char var, double a, double b, double *result)
{
    // check for valid parameter
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return -1;
    if (var == '\0' || var == 'c' || var == 'e' || var == 'g')
        return -2;

    if (is_zero(b - a))
    {
        (*result) = 0.0;
        return 0;
    }

    double sign = 1.0;

    if (b < a)
    {
        double temp = b;
        b = a;
        a = temp;

        sign = -1.0;
    }

    double weights[1000] = {
        7.413338354550367e-06,
        1.725676976320279e-05,
        2.7114606547636703e-05,
        3.697344201256387e-05,
        4.683216707270679e-05,
        5.669050650150314e-05,
        6.65483159260299e-05,
        7.640548208207731e-05,
        8.626190133395541e-05,
        9.611747354834037e-05,
        0.0001059721000972662,
        0.0001158256830369512,
        0.00012567812476483887,
        0.00013552932786467097,
        0.00014537919504392776,
        0.0001552276290778709,
        0.0001650745327967051,
        0.00017491980905309565,
        0.0001847633607494036,
        0.0001946050908077355,
        0.00020444490216906975,
        0.00021428269780210076,
        0.00022411838070448173,
        0.00023395185388504677,
        0.00024378302038633904,
        0.0002536117832733217,
        0.00026343804562751837,
        0.0002732617105678513,
        0.00028308268123433683,
        0.0002929008607839073,
        0.00030271615241929455,
        0.0003125284593628315,
        0.0003223376848625088,
        0.00033214373220093245,
        0.00034194650469647643,
        0.0003517459056931891,
        0.00036154183857157616,
        0.00037133420674866573,
        0.0003811229136688711,
        0.0003909078628226916,
        0.00040068895772818307,
        0.0004104661019494447,
        0.0004202391990865661,
        0.00043000815277653107,
        0.0004397728667026494,
        0.000449533244586114,
        0.0004592891901940329,
        0.00046904060732993,
        0.00047878739985274916,
        0.0004885294716605607,
        0.0004982667266975382,
        0.0005079990689574065,
        0.0005177264024825025,
        0.0005274486313626285,
        0.0005371656597407088,
        0.0005468773918079403,
        0.0005565837318083683,
        0.0005662845840428901,
        0.0005759798528640558,
        0.0005856694426750225,
        0.0005953532579426982,
        0.0006050312031840294,
        0.0006147031829797445,
        0.0006243691019665407,
        0.0006340288648384858,
        0.0006436823763561158,
        0.0006533295413362718,
        0.0006629702646598111,
        0.0006726044512744151,
        0.0006822320061876633,
        0.0006918528344743362,
        0.0007014668412779536,
        0.0007110739318033653,
        0.0007206740113295482,
        0.0007302669852010934,
        0.0007398527588351841,
        0.0007494312377179105,
        0.0007590023274069934,
        0.0007685659335356233,
        0.0007781219618086658,
        0.0007876703180063584,
        0.0007972109079839473,
        0.0008067436376744025,
        0.0008162684130869864,
        0.0008257851403104629,
        0.0008352937255105157,
        0.0008447940749387042,
        0.0008542860949202111,
        0.0008637696918692955,
        0.0008732447722775966,
        0.0008827112427253605,
        0.0008921690098756933,
        0.0009016179804759613,
        0.0009110580613634788,
        0.0009204891594594649,
        0.0009299111817785794,
        0.0009393240354204018,
        0.0009487276275763012,
        0.0009581218655308271,
        0.0009675066566580974,
        0.0009768819084266583,
        0.0009862475284004857,
        0.0009956034242351224,
        0.0010049495036850073,
        0.0010142856746001242,
        0.0010236118449279074,
        0.0010329279227152737,
        0.0010422338161081596,
        0.0010515294333530802,
        0.0010608146827964814,
        0.0010700894728901873,
        0.001079353712185136,
        0.001088607309340481,
        0.0010978501731165912,
        0.0011070822123824193,
        0.0011163033361116772,
        0.0011255134533867555,
        0.0011347124733987327,
        0.0011439003054473868,
        0.0011530768589436613,
        0.0011622420434082785,
        0.0011713957684752311,
        0.001180537943891676,
        0.0011896684795177873,
        0.0011987872853291585,
        0.0012078942714166957,
        0.0012169893479879502,
        0.0012260724253674617,
        0.0012351434139995284,
        0.0012442022244454108,
        0.0012532487673883451,
        0.0012622829536319525,
        0.0012713046941010583,
        0.0012803138998442336,
        0.0012893104820321094,
        0.0012982943519621916,
        0.0013072654210545096,
        0.0013162236008577007,
        0.001325168803046918,
        0.0013341009394227572,
        0.0013430199219194563,
        0.0013519256625955732,
        0.0013608180736447892,
        0.0013696970673898782,
        0.0013785625562854748,
        0.0013874144529214816,
        0.001396252670019324,
        0.001405077120437311,
        0.001413887717168748,
        0.0014226843733430757,
        0.0014314670022281598,
        0.0014402355172289426,
        0.0014489898318902834,
        0.0014577298598972563,
        0.0014664555150755633,
        0.0014751667113926134,
        0.0014838633629582231,
        0.0014925453840247949,
        0.001501212688991893,
        0.0015098651924003073,
        0.0015185028089395283,
        0.001527125453445171,
        0.001535733040899465,
        0.0015443254864343523,
        0.0015529027053307392,
        0.0015614646130198396,
        0.0015700111250824503,
        0.0015785421572527844,
        0.0015870576254177402,
        0.0015955574456161172,
        0.0016040415340424705,
        0.001612509807045922,
        0.0016209621811311943,
        0.0016293985729608996,
        0.001637818899353063,
        0.0016462230772871958,
        0.0016546110238991624,
        0.0016629826564864621,
        0.0016713378925069832,
        0.0016796766495804092,
        0.001687998845488653,
        0.0016963043981773455,
        0.0017045932257554615,
        0.0017128652464973146,
        0.0017211203788440458,
        0.0017293585414007936,
        0.00173757965294256,
        0.0017457836324108328,
        0.0017539703989168014,
        0.0017621398717412148,
        0.0017702919703347997,
        0.001778426614320527,
        0.0017865437234921718,
        0.001794643217818154,
        0.0018027250174392747,
        0.0018107890426709797,
        0.00181883521400438,
        0.0018268634521063337,
        0.0018348736778200593,
        0.0018428658121671902,
        0.0018508397763477447,
        0.0018587954917403456,
        0.0018667328799033833,
        0.001874651862576365,
        0.0018825523616809161,
        0.0018904342993197514,
        0.001898297597778849,
        0.0019061421795283364,
        0.0019139679672231982,
        0.001921774883702597,
        0.001929562851992474,
        0.0019373317953058386,
        0.0019450816370429574,
        0.001952812300792473,
        0.001960523710331979,
        0.001968215789628438,
        0.001975888462841346,
        0.0019835416543188436,
        0.0019911752886031787,
        0.0019987892904288437,
        0.002006383584723584,
        0.0020139580966095447,
        0.002021512751404171,
        0.0020290474746207207,
        0.0020365621919684893,
        0.002044056829354918,
        0.002051531312884425,
        0.0020589855688604186,
        0.002066419523786435,
        0.0020738331043653963,
        0.002081226237501492,
        0.002088598850300541,
        0.0020959508700699766,
        0.0021032822243208732,
        0.0021105928407689355,
        0.002117882647332392,
        0.002125151572136188,
        0.0021323995435107044,
        0.0021396264899925512,
        0.0021468323403260083,
        0.0021540170234638696,
        0.0021611804685663987,
        0.0021683226050041946,
        0.0021754433623576612,
        0.002182542670418413,
        0.002189620459188275,
        0.0021966766588828023,
        0.002203711199929888,
        0.0022107240129701383,
        0.0022177150288597036,
        0.00222468417866866,
        0.002231631393683112,
        0.002238556605405362,
        0.0022454597455548865,
        0.0022523407460683883,
        0.0022591995391010628,
        0.0022660360570271034,
        0.0022728502324401326,
        0.0022796419981543133,
        0.00228641128720434,
        0.0022931580328470363,
        0.002299882168561699,
        0.002306583628049336,
        0.002313262345235788,
        0.0023199182542706096,
        0.0023265512895285683,
        0.002333161385609163,
        0.002339748477339188,
        0.002346312499771324,
        0.002352853388186088,
        0.00235937107809195,
        0.002365865505226363,
        0.0023723366055561205,
        0.0023787843152776357,
        0.0023852085708183216,
        0.0023916093088370647,
        0.0023979864662236035,
        0.002404339980101284,
        0.002410669787826256,
        0.002416975826988221,
        0.002423258035410801,
        0.0024295163511538964,
        0.0024357507125117492,
        0.002441961058015012,
        0.002448147326431763,
        0.002454309456766864,
        0.0024604473882633734,
        0.002466561060402717,
        0.0024726504129060378,
        0.0024787153857337924,
        0.0024847559190870165,
        0.002490771953407409,
        0.0024967634293786866,
        0.002502730287926348,
        0.0025086724702190794,
        0.002514589917668338,
        0.0025204825719296574,
        0.0025263503749027435,
        0.0025321932687331237,
        0.0025380111958112853,
        0.0025438040987737147,
        0.0025495719205043173,
        0.0025553146041337503,
        0.002561032093040534,
        0.0025667243308518943,
        0.002572391261444133,
        0.0025780328289423432,
        0.002583648977722313,
        0.0025892396524102887,
        0.002594804797883984,
        0.002600344359272371,
        0.002605858281956619,
        0.00261134651157138,
        0.002616808994003627,
        0.0026222456753952398,
        0.002627656502141772,
        0.002633041420893745,
        0.0026384003785576452,
        0.0026437333222952795,
        0.0026490401995254145,
        0.002654320957923396,
        0.002659575545422716,
        0.0026648039102142402,
        0.0026700060007479255,
        0.002675181765732235,
        0.0026803311541359976,
        0.0026854541151869475,
        0.002690550598374587,
        0.002695620553448794,
        0.002700663930420963,
        0.0027056806795651167,
        0.0027106707514170884,
        0.0027156340967762534,
        0.002720570666705341,
        0.0027254804125311847,
        0.0027303632858447437,
        0.0027352192385023443,
        0.0027400482226256338,
        0.00274485019060203,
        0.002749625095085358,
        0.002754372888996461,
        0.00275909352552321,
        0.0027637869581215065,
        0.0027684531405153686,
        0.0027730920266973704,
        0.002777703570929367,
        0.0027822877277426834,
        0.0027868444519389855,
        0.0027913736985899834,
        0.0027958754230385484,
        0.0028003495808988465,
        0.0028047961280569466,
        0.0028092150206710464,
        0.0028136062151719785,
        0.0028179696682638445,
        0.00282230533692409,
        0.002826613178404149,
        0.0028308931502299337,
        0.0028351452102019846,
        0.0028393693163962083,
        0.002843565427163913,
        0.00284773350113265,
        0.0028518734972063087,
        0.0028559853745656048,
        0.0028600690926685064,
        0.0028641246112507206,
        0.0028681518903258645,
        0.0028721508901859314,
        0.002876121571402054,
        0.0028800638948242793,
        0.0028839778215822612,
        0.002887863313085801,
        0.002891720331024996,
        0.0028955488373706914,
        0.0028993487943747343,
        0.0029031201645706595,
        0.002906862910773683,
        0.0029105769960814025,
        0.0029142623838738905,
        0.002917919037814141,
        0.002921546921848605,
        0.002925146000207327,
        0.0029287162374042578,
        0.002932257598237863,
        0.0029357700477912487,
        0.002939253551432596,
        0.0029427080748154915,
        0.0029461335838792844,
        0.002949530044849325,
        0.0029528974242374515,
        0.0029562356888421693,
        0.002959544805749031,
        0.0029628247423311165,
        0.002966075466249078,
        0.002969296945451664,
        0.0029724891481758523,
        0.002975652042947527,
        0.0029787855985812274,
        0.0029818897841810675,
        0.0029849645691405204,
        0.002988009923143016,
        0.0029910258161622645,
        0.00299401221846223,
        0.0029969691005979023,
        0.0029998964334151355,
        0.0030027941880512343,
        0.0030056623359351066,
        0.003008500848787569,
        0.003011309698621721,
        0.003014088857742839,
        0.0030168382987493803,
        0.0030195579945324533,
        0.003022247918276637,
        0.00302490804345997,
        0.0030275383438543844,
        0.0030301387935257416,
        0.003032709366834318,
        0.003035250038434985,
        0.0030377607832773527,
        0.0030402415766061703,
        0.003042692393961415,
        0.0030451132111787853,
        0.0030475040043896028,
        0.003049864750021274,
        0.003052195424797495,
        0.003054496005738437,
        0.0030567664701609616,
        0.003059006795678915,
        0.0030612169602032805,
        0.003063396941942411,
        0.0030655467194022792,
        0.0030676662713866403,
        0.00306975557699728,
        0.003071814615634216,
        0.003073843366995836,
        0.0030758418110792243,
        0.003077809928180239,
        0.003079747698893778,
        0.003081655104113944,
        0.0030835321250342056,
        0.00308537874314765,
        0.0030871949402471125,
        0.0030889806984253773,
        0.0030907360000753214,
        0.0030924608278901857,
        0.0030941551648635524,
        0.0030958189942897636,
        0.003097452299763903,
        0.003099055065182012,
        0.003100627274741234,
        0.0031021689129400016,
        0.0031036799645781676,
        0.0031051604147571852,
        0.003106610248880187,
        0.003108029452652219,
        0.003109418012080285,
        0.0031107759134735616,
        0.00311210314344354,
        0.0031133996889040265,
        0.0031146655370714645,
        0.0031159006754649253,
        0.0031171050919062563,
        0.0031182787745202482,
        0.0031194217117346944,
        0.0031205338922805316,
        0.0031216153051919805,
        0.0031226659398065626,
        0.003123685785765325,
        0.0031246748330128644,
        0.003125633071797404,
        0.003126560492670998,
        0.0031274570864894997,
        0.0031283228444127457,
        0.003129157757904595,
        0.003129961818733003,
        0.003130735018970174,
        0.003131477350992528,
        0.003132188807480882,
        0.0031328693814204776,
        0.0031335190661010226,
        0.003134137855116813,
        0.0031347257423667194,
        0.0031352827220543656,
        0.0031358087886880683,
        0.003136303937080943,
        0.0031367681623509754,
        0.003137201459920991,
        0.003137603825518838,
        0.003137975255177264,
        0.003138315745234097,
        0.003138625292332174,
        0.003138903893419455,
        0.0031391515457490026,
        0.0031393682468790407,
        0.003139553994672929,
        0.0031397087872992667,
        0.003139832623231848,
        0.0031399255012496603,
        0.0031399874204369434,
        0.003140018380183209,
        0.003140018380183209,
        0.0031399874204369434,
        0.0031399255012496603,
        0.003139832623231848,
        0.0031397087872992667,
        0.003139553994672929,
        0.0031393682468790407,
        0.0031391515457490026,
        0.003138903893419455,
        0.003138625292332174,
        0.003138315745234097,
        0.003137975255177264,
        0.003137603825518838,
        0.003137201459920991,
        0.0031367681623509754,
        0.003136303937080943,
        0.0031358087886880683,
        0.0031352827220543656,
        0.0031347257423667194,
        0.003134137855116813,
        0.0031335190661010226,
        0.0031328693814204776,
        0.003132188807480882,
        0.003131477350992528,
        0.003130735018970174,
        0.003129961818733003,
        0.003129157757904595,
        0.0031283228444127457,
        0.0031274570864894997,
        0.003126560492670998,
        0.003125633071797404,
        0.0031246748330128644,
        0.003123685785765325,
        0.0031226659398065626,
        0.0031216153051919805,
        0.0031205338922805316,
        0.0031194217117346944,
        0.0031182787745202482,
        0.0031171050919062563,
        0.0031159006754649253,
        0.0031146655370714645,
        0.0031133996889040265,
        0.00311210314344354,
        0.0031107759134735616,
        0.003109418012080285,
        0.003108029452652219,
        0.003106610248880187,
        0.0031051604147571852,
        0.0031036799645781676,
        0.0031021689129400016,
        0.003100627274741234,
        0.003099055065182012,
        0.003097452299763903,
        0.0030958189942897636,
        0.0030941551648635524,
        0.0030924608278901857,
        0.0030907360000753214,
        0.0030889806984253773,
        0.0030871949402471125,
        0.00308537874314765,
        0.0030835321250342056,
        0.003081655104113944,
        0.003079747698893778,
        0.003077809928180239,
        0.0030758418110792243,
        0.003073843366995836,
        0.003071814615634216,
        0.00306975557699728,
        0.0030676662713866403,
        0.0030655467194022792,
        0.003063396941942411,
        0.0030612169602032805,
        0.003059006795678915,
        0.0030567664701609616,
        0.003054496005738437,
        0.003052195424797495,
        0.003049864750021274,
        0.0030475040043896028,
        0.0030451132111787853,
        0.003042692393961415,
        0.0030402415766061703,
        0.0030377607832773527,
        0.003035250038434985,
        0.003032709366834318,
        0.0030301387935257416,
        0.0030275383438543844,
        0.00302490804345997,
        0.003022247918276637,
        0.0030195579945324533,
        0.0030168382987493803,
        0.003014088857742839,
        0.003011309698621721,
        0.003008500848787569,
        0.0030056623359351066,
        0.0030027941880512343,
        0.0029998964334151355,
        0.0029969691005979023,
        0.00299401221846223,
        0.0029910258161622645,
        0.002988009923143016,
        0.0029849645691405204,
        0.0029818897841810675,
        0.0029787855985812274,
        0.002975652042947527,
        0.0029724891481758523,
        0.002969296945451664,
        0.002966075466249078,
        0.0029628247423311165,
        0.002959544805749031,
        0.0029562356888421693,
        0.0029528974242374515,
        0.002949530044849325,
        0.0029461335838792844,
        0.0029427080748154915,
        0.002939253551432596,
        0.0029357700477912487,
        0.002932257598237863,
        0.0029287162374042578,
        0.002925146000207327,
        0.002921546921848605,
        0.002917919037814141,
        0.0029142623838738905,
        0.0029105769960814025,
        0.002906862910773683,
        0.0029031201645706595,
        0.0028993487943747343,
        0.0028955488373706914,
        0.002891720331024996,
        0.002887863313085801,
        0.0028839778215822612,
        0.0028800638948242793,
        0.002876121571402054,
        0.0028721508901859314,
        0.0028681518903258645,
        0.0028641246112507206,
        0.0028600690926685064,
        0.0028559853745656048,
        0.0028518734972063087,
        0.00284773350113265,
        0.002843565427163913,
        0.0028393693163962083,
        0.0028351452102019846,
        0.0028308931502299337,
        0.002826613178404149,
        0.00282230533692409,
        0.0028179696682638445,
        0.0028136062151719785,
        0.0028092150206710464,
        0.0028047961280569466,
        0.0028003495808988465,
        0.0027958754230385484,
        0.0027913736985899834,
        0.0027868444519389855,
        0.0027822877277426834,
        0.002777703570929367,
        0.0027730920266973704,
        0.0027684531405153686,
        0.0027637869581215065,
        0.00275909352552321,
        0.002754372888996461,
        0.002749625095085358,
        0.00274485019060203,
        0.0027400482226256338,
        0.0027352192385023443,
        0.0027303632858447437,
        0.0027254804125311847,
        0.002720570666705341,
        0.0027156340967762534,
        0.0027106707514170884,
        0.0027056806795651167,
        0.002700663930420963,
        0.002695620553448794,
        0.002690550598374587,
        0.0026854541151869475,
        0.0026803311541359976,
        0.002675181765732235,
        0.0026700060007479255,
        0.0026648039102142402,
        0.002659575545422716,
        0.002654320957923396,
        0.0026490401995254145,
        0.0026437333222952795,
        0.0026384003785576452,
        0.002633041420893745,
        0.002627656502141772,
        0.0026222456753952398,
        0.002616808994003627,
        0.00261134651157138,
        0.002605858281956619,
        0.002600344359272371,
        0.002594804797883984,
        0.0025892396524102887,
        0.002583648977722313,
        0.0025780328289423432,
        0.002572391261444133,
        0.0025667243308518943,
        0.002561032093040534,
        0.0025553146041337503,
        0.0025495719205043173,
        0.0025438040987737147,
        0.0025380111958112853,
        0.0025321932687331237,
        0.0025263503749027435,
        0.0025204825719296574,
        0.002514589917668338,
        0.0025086724702190794,
        0.002502730287926348,
        0.0024967634293786866,
        0.002490771953407409,
        0.0024847559190870165,
        0.0024787153857337924,
        0.0024726504129060378,
        0.002466561060402717,
        0.0024604473882633734,
        0.002454309456766864,
        0.002448147326431763,
        0.002441961058015012,
        0.0024357507125117492,
        0.0024295163511538964,
        0.002423258035410801,
        0.002416975826988221,
        0.002410669787826256,
        0.002404339980101284,
        0.0023979864662236035,
        0.0023916093088370647,
        0.0023852085708183216,
        0.0023787843152776357,
        0.0023723366055561205,
        0.002365865505226363,
        0.00235937107809195,
        0.002352853388186088,
        0.002346312499771324,
        0.002339748477339188,
        0.002333161385609163,
        0.0023265512895285683,
        0.0023199182542706096,
        0.002313262345235788,
        0.002306583628049336,
        0.002299882168561699,
        0.0022931580328470363,
        0.00228641128720434,
        0.0022796419981543133,
        0.0022728502324401326,
        0.0022660360570271034,
        0.0022591995391010628,
        0.0022523407460683883,
        0.0022454597455548865,
        0.002238556605405362,
        0.002231631393683112,
        0.00222468417866866,
        0.0022177150288597036,
        0.0022107240129701383,
        0.002203711199929888,
        0.0021966766588828023,
        0.002189620459188275,
        0.002182542670418413,
        0.0021754433623576612,
        0.0021683226050041946,
        0.0021611804685663987,
        0.0021540170234638696,
        0.0021468323403260083,
        0.0021396264899925512,
        0.0021323995435107044,
        0.002125151572136188,
        0.002117882647332392,
        0.0021105928407689355,
        0.0021032822243208732,
        0.0020959508700699766,
        0.002088598850300541,
        0.002081226237501492,
        0.0020738331043653963,
        0.002066419523786435,
        0.0020589855688604186,
        0.002051531312884425,
        0.002044056829354918,
        0.0020365621919684893,
        0.0020290474746207207,
        0.002021512751404171,
        0.0020139580966095447,
        0.002006383584723584,
        0.0019987892904288437,
        0.0019911752886031787,
        0.0019835416543188436,
        0.001975888462841346,
        0.001968215789628438,
        0.001960523710331979,
        0.001952812300792473,
        0.0019450816370429574,
        0.0019373317953058386,
        0.001929562851992474,
        0.001921774883702597,
        0.0019139679672231982,
        0.0019061421795283364,
        0.001898297597778849,
        0.0018904342993197514,
        0.0018825523616809161,
        0.001874651862576365,
        0.0018667328799033833,
        0.0018587954917403456,
        0.0018508397763477447,
        0.0018428658121671902,
        0.0018348736778200593,
        0.0018268634521063337,
        0.00181883521400438,
        0.0018107890426709797,
        0.0018027250174392747,
        0.001794643217818154,
        0.0017865437234921718,
        0.001778426614320527,
        0.0017702919703347997,
        0.0017621398717412148,
        0.0017539703989168014,
        0.0017457836324108328,
        0.00173757965294256,
        0.0017293585414007936,
        0.0017211203788440458,
        0.0017128652464973146,
        0.0017045932257554615,
        0.0016963043981773455,
        0.001687998845488653,
        0.0016796766495804092,
        0.0016713378925069832,
        0.0016629826564864621,
        0.0016546110238991624,
        0.0016462230772871958,
        0.001637818899353063,
        0.0016293985729608996,
        0.0016209621811311943,
        0.001612509807045922,
        0.0016040415340424705,
        0.0015955574456161172,
        0.0015870576254177402,
        0.0015785421572527844,
        0.0015700111250824503,
        0.0015614646130198396,
        0.0015529027053307392,
        0.0015443254864343523,
        0.001535733040899465,
        0.001527125453445171,
        0.0015185028089395283,
        0.0015098651924003073,
        0.001501212688991893,
        0.0014925453840247949,
        0.0014838633629582231,
        0.0014751667113926134,
        0.0014664555150755633,
        0.0014577298598972563,
        0.0014489898318902834,
        0.0014402355172289426,
        0.0014314670022281598,
        0.0014226843733430757,
        0.001413887717168748,
        0.001405077120437311,
        0.001396252670019324,
        0.0013874144529214816,
        0.0013785625562854748,
        0.0013696970673898782,
        0.0013608180736447892,
        0.0013519256625955732,
        0.0013430199219194563,
        0.0013341009394227572,
        0.001325168803046918,
        0.0013162236008577007,
        0.0013072654210545096,
        0.0012982943519621916,
        0.0012893104820321094,
        0.0012803138998442336,
        0.0012713046941010583,
        0.0012622829536319525,
        0.0012532487673883451,
        0.0012442022244454108,
        0.0012351434139995284,
        0.0012260724253674617,
        0.0012169893479879502,
        0.0012078942714166957,
        0.0011987872853291585,
        0.0011896684795177873,
        0.001180537943891676,
        0.0011713957684752311,
        0.0011622420434082785,
        0.0011530768589436613,
        0.0011439003054473868,
        0.0011347124733987327,
        0.0011255134533867555,
        0.0011163033361116772,
        0.0011070822123824193,
        0.0010978501731165912,
        0.001088607309340481,
        0.001079353712185136,
        0.0010700894728901873,
        0.0010608146827964814,
        0.0010515294333530802,
        0.0010422338161081596,
        0.0010329279227152737,
        0.0010236118449279074,
        0.0010142856746001242,
        0.0010049495036850073,
        0.0009956034242351224,
        0.0009862475284004857,
        0.0009768819084266583,
        0.0009675066566580974,
        0.0009581218655308271,
        0.0009487276275763012,
        0.0009393240354204018,
        0.0009299111817785794,
        0.0009204891594594649,
        0.0009110580613634788,
        0.0009016179804759613,
        0.0008921690098756933,
        0.0008827112427253605,
        0.0008732447722775966,
        0.0008637696918692955,
        0.0008542860949202111,
        0.0008447940749387042,
        0.0008352937255105157,
        0.0008257851403104629,
        0.0008162684130869864,
        0.0008067436376744025,
        0.0007972109079839473,
        0.0007876703180063584,
        0.0007781219618086658,
        0.0007685659335356233,
        0.0007590023274069934,
        0.0007494312377179105,
        0.0007398527588351841,
        0.0007302669852010934,
        0.0007206740113295482,
        0.0007110739318033653,
        0.0007014668412779536,
        0.0006918528344743362,
        0.0006822320061876633,
        0.0006726044512744151,
        0.0006629702646598111,
        0.0006533295413362718,
        0.0006436823763561158,
        0.0006340288648384858,
        0.0006243691019665407,
        0.0006147031829797445,
        0.0006050312031840294,
        0.0005953532579426982,
        0.0005856694426750225,
        0.0005759798528640558,
        0.0005662845840428901,
        0.0005565837318083683,
        0.0005468773918079403,
        0.0005371656597407088,
        0.0005274486313626285,
        0.0005177264024825025,
        0.0005079990689574065,
        0.0004982667266975382,
        0.0004885294716605607,
        0.00047878739985274916,
        0.00046904060732993,
        0.0004592891901940329,
        0.000449533244586114,
        0.0004397728667026494,
        0.00043000815277653107,
        0.0004202391990865661,
        0.0004104661019494447,
        0.00040068895772818307,
        0.0003909078628226916,
        0.0003811229136688711,
        0.00037133420674866573,
        0.00036154183857157616,
        0.0003517459056931891,
        0.00034194650469647643,
        0.00033214373220093245,
        0.0003223376848625088,
        0.0003125284593628315,
        0.00030271615241929455,
        0.0002929008607839073,
        0.00028308268123433683,
        0.0002732617105678513,
        0.00026343804562751837,
        0.0002536117832733217,
        0.00024378302038633904,
        0.00023395185388504677,
        0.00022411838070448173,
        0.00021428269780210076,
        0.00020444490216906975,
        0.0001946050908077355,
        0.0001847633607494036,
        0.00017491980905309565,
        0.0001650745327967051,
        0.0001552276290778709,
        0.00014537919504392776,
        0.00013552932786467097,
        0.00012567812476483887,
        0.0001158256830369512,
        0.0001059721000972662,
        9.611747354834037e-05,
        8.626190133395541e-05,
        7.640548208207731e-05,
        6.65483159260299e-05,
        5.669050650150314e-05,
        4.683216707270679e-05,
        3.697344201256387e-05,
        2.7114606547636703e-05,
        1.725676976320279e-05,
        7.413338354550367e-06};

    double nodes[1000] = {
        -0.9999971112980756,
        -0.9999847796329174,
        -0.9999625941483602,
        -0.9999305501355009,
        -0.9998886473067012,
        -0.9998368859309701,
        -0.999775266470634,
        -0.9997037895136229,
        -0.9996224557554706,
        -0.999531265993324,
        -0.9994302211236081,
        -0.9993193221410008,
        -0.9991985701379369,
        -0.9990679663043477,
        -0.9989275119275132,
        -0.9987772083919715,
        -0.9986170571794587,
        -0.9984470598688657,
        -0.9982672181362039,
        -0.9980775337545768,
        -0.9978780085941545,
        -0.99766864462215,
        -0.997449443902795,
        -0.9972204085973179,
        -0.9969815409639196,
        -0.9967328433577501,
        -0.9964743182308847,
        -0.9962059681322979,
        -0.9959277957078384,
        -0.9956398037002028,
        -0.9953419949489071,
        -0.9950343723902594,
        -0.9947169390573305,
        -0.9943896980799236,
        -0.9940526526845432,
        -0.9937058061943637,
        -0.9933491620291958,
        -0.9929827237054533,
        -0.9926064948361183,
        -0.9922204791307051,
        -0.9918246803952242,
        -0.991419102532144,
        -0.991003749540353,
        -0.99057862551512,
        -0.9901437346480535,
        -0.9896990812270609,
        -0.9892446696363055,
        -0.9887805043561644,
        -0.9883065899631827,
        -0.9878229311300296,
        -0.9873295326254522,
        -0.9868263993142279,
        -0.9863135361571168,
        -0.9857909482108129,
        -0.9852586406278939,
        -0.9847166186567707,
        -0.9841648876416356,
        -0.983603453022409,
        -0.9830323203346869,
        -0.9824514952096856,
        -0.9818609833741858,
        -0.9812607906504773,
        -0.9806509229563004,
        -0.9800313863047881,
        -0.9794021868044072,
        -0.9787633306588969,
        -0.978114824167209,
        -0.9774566737234449,
        -0.9767888858167928,
        -0.9761114670314638,
        -0.9754244240466269,
        -0.974727763636343,
        -0.9740214926694986,
        -0.9733056181097374,
        -0.9725801470153922,
        -0.9718450865394149,
        -0.9711004439293064,
        -0.9703462265270447,
        -0.9695824417690128,
        -0.9688090971859251,
        -0.9680262004027537,
        -0.9672337591386525,
        -0.9664317812068817,
        -0.9656202745147303,
        -0.9647992470634386,
        -0.9639687069481189,
        -0.9631286623576756,
        -0.9622791215747253,
        -0.9614200929755139,
        -0.9605515850298352,
        -0.9596736063009463,
        -0.9587861654454841,
        -0.9578892712133795,
        -0.956982932447771,
        -0.9560671580849179,
        -0.9551419571541118,
        -0.9542073387775878,
        -0.9532633121704347,
        -0.9523098866405036,
        -0.951347071588317,
        -0.9503748765069749,
        -0.9493933109820625,
        -0.9484023846915548,
        -0.9474021074057215,
        -0.9463924889870307,
        -0.9453735393900514,
        -0.9443452686613558,
        -0.9433076869394198,
        -0.9422608044545232,
        -0.9412046315286491,
        -0.9401391785753814,
        -0.9390644560998033,
        -0.9379804746983922,
        -0.9368872450589167,
        -0.9357847779603303,
        -0.9346730842726655,
        -0.9335521749569263,
        -0.9324220610649806,
        -0.9312827537394508,
        -0.9301342642136041,
        -0.928976603811242,
        -0.9278097839465882,
        -0.9266338161241762,
        -0.925448711938736,
        -0.9242544830750798,
        -0.9230511413079867,
        -0.9218386985020864,
        -0.9206171666117428,
        -0.9193865576809351,
        -0.9181468838431406,
        -0.9168981573212134,
        -0.915640390427265,
        -0.9143735955625425,
        -0.9130977852173066,
        -0.9118129719707079,
        -0.9105191684906633,
        -0.9092163875337312,
        -0.9079046419449854,
        -0.9065839446578885,
        -0.9052543086941648,
        -0.903915747163671,
        -0.9025682732642681,
        -0.9012119002816904,
        -0.8998466415894147,
        -0.898472510648529,
        -0.8970895210075985,
        -0.8956976863025338,
        -0.8942970202564546,
        -0.8928875366795559,
        -0.8914692494689709,
        -0.8900421726086343,
        -0.8886063201691445,
        -0.8871617063076249,
        -0.8857083452675839,
        -0.8842462513787749,
        -0.8827754390570548,
        -0.8812959228042421,
        -0.8798077172079737,
        -0.8783108369415608,
        -0.876805296763845,
        -0.875291111519052,
        -0.8737682961366459,
        -0.8722368656311812,
        -0.8706968351021556,
        -0.8691482197338605,
        -0.8675910347952316,
        -0.8660252956396985,
        -0.864451017705033,
        -0.8628682165131966,
        -0.8612769076701884,
        -0.8596771068658904,
        -0.8580688298739131,
        -0.8564520925514401,
        -0.8548269108390713,
        -0.8531933007606665,
        -0.8515512784231863,
        -0.8499008600165348,
        -0.8482420618133982,
        -0.846574900169086,
        -0.8448993915213685,
        -0.8432155523903155,
        -0.8415233993781331,
        -0.8398229491690001,
        -0.8381142185289034,
        -0.8363972243054726,
        -0.8346719834278143,
        -0.8329385129063448,
        -0.8311968298326224,
        -0.8294469513791792,
        -0.8276888947993514,
        -0.8259226774271093,
        -0.8241483166768867,
        -0.8223658300434088,
        -0.8205752351015196,
        -0.8187765495060093,
        -0.8169697909914395,
        -0.8151549773719687,
        -0.8133321265411767,
        -0.811501256471888,
        -0.8096623852159945,
        -0.8078155309042779,
        -0.8059607117462306,
        -0.8040979460298764,
        -0.8022272521215899,
        -0.8003486484659154,
        -0.7984621535853855,
        -0.7965677860803383,
        -0.7946655646287335,
        -0.7927555079859687,
        -0.7908376349846947,
        -0.7889119645346293,
        -0.786978515622371,
        -0.7850373073112119,
        -0.7830883587409498,
        -0.7811316891276995,
        -0.7791673177637031,
        -0.7771952640171396,
        -0.7752155473319349,
        -0.7732281872275689,
        -0.7712332032988838,
        -0.7692306152158908,
        -0.7672204427235757,
        -0.7652027056417049,
        -0.7631774238646294,
        -0.7611446173610891,
        -0.7591043061740154,
        -0.7570565104203342,
        -0.7550012502907671,
        -0.7529385460496325,
        -0.7508684180346457,
        -0.7487908866567183,
        -0.7467059723997574,
        -0.7446136958204633,
        -0.7425140775481267,
        -0.7404071382844252,
        -0.7382928988032199,
        -0.7361713799503499,
        -0.7340426026434268,
        -0.731906587871629,
        -0.7297633566954941,
        -0.7276129302467114,
        -0.7254553297279142,
        -0.7232905764124696,
        -0.7211186916442699,
        -0.7189396968375211,
        -0.716753613476533,
        -0.7145604631155059,
        -0.7123602673783193,
        -0.7101530479583181,
        -0.7079388266180989,
        -0.7057176251892954,
        -0.7034894655723629,
        -0.7012543697363629,
        -0.6990123597187459,
        -0.6967634576251345,
        -0.6945076856291054,
        -0.6922450659719706,
        -0.6899756209625583,
        -0.6876993729769928,
        -0.6854163444584741,
        -0.6831265579170562,
        -0.6808300359294255,
        -0.6785268011386782,
        -0.676216876254097,
        -0.6739002840509268,
        -0.6715770473701508,
        -0.6692471891182651,
        -0.6669107322670522,
        -0.6645676998533556,
        -0.6622181149788519,
        -0.659862000809823,
        -0.6574993805769284,
        -0.655130277574975,
        -0.6527547151626887,
        -0.6503727167624831,
        -0.6479843058602289,
        -0.6455895060050229,
        -0.6431883408089545,
        -0.6407808339468741,
        -0.6383670091561593,
        -0.6359468902364808,
        -0.6335205010495673,
        -0.6310878655189711,
        -0.6286490076298319,
        -0.6262039514286397,
        -0.6237527210229986,
        -0.6212953405813886,
        -0.6188318343329274,
        -0.6163622265671316,
        -0.613886541633677,
        -0.6114048039421587,
        -0.6089170379618506,
        -0.6064232682214636,
        -0.6039235193089044,
        -0.6014178158710324,
        -0.5989061826134172,
        -0.596388644300095,
        -0.5938652257533241,
        -0.5913359518533403,
        -0.5888008475381117,
        -0.5862599378030929,
        -0.5837132477009781,
        -0.5811608023414545,
        -0.5786026268909548,
        -0.5760387465724085,
        -0.5734691866649938,
        -0.5708939725038883,
        -0.5683131294800188,
        -0.5657266830398112,
        -0.5631346586849396,
        -0.560537081972075,
        -0.557933978512633,
        -0.5553253739725216,
        -0.5527112940718879,
        -0.5500917645848645,
        -0.5474668113393157,
        -0.5448364602165826,
        -0.5422007371512276,
        -0.5395596681307795,
        -0.5369132791954764,
        -0.5342615964380096,
        -0.531604646003266,
        -0.5289424540880703,
        -0.5262750469409269,
        -0.523602450861761,
        -0.5209246922016593,
        -0.5182417973626102,
        -0.5155537927972433,
        -0.512860705008569,
        -0.5101625605497166,
        -0.5074593860236731,
        -0.5047512080830207,
        -0.5020380534296734,
        -0.499319948814615,
        -0.496596921037634,
        -0.4938689969470603,
        -0.4911362034395001,
        -0.4883985674595706,
        -0.4856561159996347,
        -0.4829088760995346,
        -0.480156874846325,
        -0.4774001393740067,
        -0.4746386968632583,
        -0.4718725745411687,
        -0.4691017996809685,
        -0.466326399601761,
        -0.463546401668253,
        -0.46076183329048487,
        -0.4579727219235604,
        -0.4551790950673761,
        -0.4523809802663498,
        -0.4495784051091495,
        -0.44677139722842096,
        -0.44395998430051553,
        -0.44114419404521704,
        -0.4383240542254687,
        -0.4354995926470993,
        -0.43267083715854887,
        -0.42983781565059437,
        -0.4270005560560745,
        -0.4241590863496145,
        -0.4213134345473501,
        -0.4184636287066513,
        -0.41560969692584604,
        -0.4127516673439427,
        -0.409889568140353,
        -0.407023427534614,
        -0.4041532737861101,
        -0.4012791351937939,
        -0.39840104009590765,
        -0.39551901686970387,
        -0.3926330939311651,
        -0.38974329973472416,
        -0.3868496627729834,
        -0.38395221157643383,
        -0.3810509747131738,
        -0.3781459807886273,
        -0.375237258445262,
        -0.37232483636230673,
        -0.36940874325546885,
        -0.3664890078766509,
        -0.36356565901366733,
        -0.3606387254899607,
        -0.35770823616431713,
        -0.3547742199305822,
        -0.35183670571737585,
        -0.34889572248780704,
        -0.3459512992391884,
        -0.3430034650027502,
        -0.34005224884335417,
        -0.3370976798592069,
        -0.334139787181573,
        -0.3311785999744876,
        -0.3282141474344693,
        -0.3252464587902318,
        -0.32227556330239604,
        -0.3193014902632015,
        -0.3163242689962176,
        -0.3133439288560542,
        -0.3103604992280728,
        -0.3073740095280961,
        -0.3043844892021184,
        -0.3013919677260153,
        -0.29839647460525265,
        -0.2953980393745962,
        -0.29239669159782,
        -0.28939246086741505,
        -0.2863853768042975,
        -0.28337546905751654,
        -0.28036276730396237,
        -0.277347301248073,
        -0.27432910062154203,
        -0.271308195183025,
        -0.2682846147178463,
        -0.2652583890377053,
        -0.2622295479803825,
        -0.2591981214094454,
        -0.2561641392139538,
        -0.2531276313081655,
        -0.25008862763124096,
        -0.2470471581469484,
        -0.24400325284336807,
        -0.24095694173259696,
        -0.23790825485045258,
        -0.23485722225617692,
        -0.23180387403214,
        -0.2287482402835435,
        -0.2256903511381236,
        -0.2226302367458542,
        -0.21956792727864946,
        -0.21650345293006645,
        -0.21343684391500742,
        -0.21036813046942177,
        -0.2072973428500081,
        -0.20422451133391578,
        -0.20114966621844652,
        -0.1980728378207555,
        -0.19499405647755255,
        -0.19191335254480307,
        -0.18883075639742866,
        -0.18574629842900764,
        -0.1826600090514754,
        -0.1795719186948245,
        -0.17648205780680476,
        -0.17339045685262292,
        -0.1702971463146423,
        -0.16720215669208224,
        -0.16410551850071747,
        -0.16100726227257714,
        -0.15790741855564377,
        -0.1548060179135522,
        -0.15170309092528805,
        -0.14859866818488632,
        -0.14549278030112975,
        -0.142385457897247,
        -0.1392767316106107,
        -0.1361666320924354,
        -0.13305519000747537,
        -0.12994243603372221,
        -0.1268284008621024,
        -0.12371311519617467,
        -0.12059660975182734,
        -0.11747891525697536,
        -0.11436006245125743,
        -0.11124008208573291,
        -0.10811900492257857,
        -0.10499686173478533,
        -0.10187368330585479,
        -0.09874950042949582,
        -0.09562434390932083,
        -0.09249824455854208,
        -0.08937123319966796,
        -0.08624334066419893,
        -0.08311459779232369,
        -0.079985035432615,
        -0.07685468444172552,
        -0.07372357568408369,
        -0.07059174003158923,
        -0.06745920836330893,
        -0.06432601156517205,
        -0.06119218052966589,
        -0.05805774615553116,
        -0.054922739347457304,
        -0.05178719101577784,
        -0.04865113207616555,
        -0.04551459344932768,
        -0.042377606060701054,
        -0.039240200840147184,
        -0.036102408721647286,
        -0.03296426064299729,
        -0.02882578754550278,
        -0.025687020373673966,
        -0.022547990074920543,
        -0.019408727599246564,
        -0.016269263898945283,
        -0.013129629928293983,
        -0.010989856643248757,
        -0.007849975001139315,
        -0.004710015960363726,
        -0.0015700104800831947,
        0.0015700104800831947,
        0.004710015960363726,
        0.007849975001139315,
        0.010989856643248757,
        0.014129629928293983,
        0.017269263898945283,
        0.020408727599246564,
        0.023547990074920543,
        0.026687020373673966,
        0.02982578754550278,
        0.03296426064299729,
        0.036102408721647286,
        0.039240200840147184,
        0.042377606060701054,
        0.04551459344932768,
        0.04865113207616555,
        0.05178719101577784,
        0.054922739347457304,
        0.05805774615553116,
        0.06119218052966589,
        0.06432601156517205,
        0.06745920836330893,
        0.07059174003158923,
        0.07372357568408369,
        0.07685468444172552,
        0.079985035432615,
        0.08311459779232369,
        0.08624334066419893,
        0.08937123319966796,
        0.09249824455854208,
        0.09562434390932083,
        0.09874950042949582,
        0.10187368330585479,
        0.10499686173478533,
        0.10811900492257857,
        0.11124008208573291,
        0.11436006245125743,
        0.11747891525697536,
        0.12059660975182734,
        0.12371311519617467,
        0.1268284008621024,
        0.12994243603372221,
        0.13305519000747537,
        0.1361666320924354,
        0.1392767316106107,
        0.142385457897247,
        0.14549278030112975,
        0.14859866818488632,
        0.15170309092528805,
        0.1548060179135522,
        0.15790741855564377,
        0.16100726227257714,
        0.16410551850071747,
        0.16720215669208224,
        0.1702971463146423,
        0.17339045685262292,
        0.17648205780680476,
        0.1795719186948245,
        0.1826600090514754,
        0.18574629842900764,
        0.18883075639742866,
        0.19191335254480307,
        0.19499405647755255,
        0.1980728378207555,
        0.20114966621844652,
        0.20422451133391578,
        0.2072973428500081,
        0.21036813046942177,
        0.21343684391500742,
        0.21650345293006645,
        0.21956792727864946,
        0.2226302367458542,
        0.2256903511381236,
        0.2287482402835435,
        0.23180387403214,
        0.23485722225617692,
        0.23790825485045258,
        0.24095694173259696,
        0.24400325284336807,
        0.2470471581469484,
        0.25008862763124096,
        0.2531276313081655,
        0.2561641392139538,
        0.2591981214094454,
        0.2622295479803825,
        0.2652583890377053,
        0.2682846147178463,
        0.271308195183025,
        0.27432910062154203,
        0.277347301248073,
        0.28036276730396237,
        0.28337546905751654,
        0.2863853768042975,
        0.28939246086741505,
        0.29239669159782,
        0.2953980393745962,
        0.29839647460525265,
        0.3013919677260153,
        0.3043844892021184,
        0.3073740095280961,
        0.3103604992280728,
        0.3133439288560542,
        0.3163242689962176,
        0.3193014902632015,
        0.32227556330239604,
        0.3252464587902318,
        0.3282141474344693,
        0.3311785999744876,
        0.334139787181573,
        0.3370976798592069,
        0.34005224884335417,
        0.3430034650027502,
        0.3459512992391884,
        0.34889572248780704,
        0.35183670571737585,
        0.3547742199305822,
        0.35770823616431713,
        0.3606387254899607,
        0.36356565901366733,
        0.3664890078766509,
        0.36940874325546885,
        0.37232483636230673,
        0.375237258445262,
        0.3781459807886273,
        0.3810509747131738,
        0.38395221157643383,
        0.3868496627729834,
        0.38974329973472416,
        0.3926330939311651,
        0.39551901686970387,
        0.39840104009590765,
        0.4012791351937939,
        0.4041532737861101,
        0.407023427534614,
        0.409889568140353,
        0.4127516673439427,
        0.41560969692584604,
        0.4184636287066513,
        0.4213134345473501,
        0.4241590863496145,
        0.4270005560560745,
        0.42983781565059437,
        0.43267083715854887,
        0.4354995926470993,
        0.4383240542254687,
        0.44114419404521704,
        0.44395998430051553,
        0.44677139722842096,
        0.4495784051091495,
        0.4523809802663498,
        0.4551790950673761,
        0.4579727219235604,
        0.46076183329048487,
        0.463546401668253,
        0.466326399601761,
        0.4691017996809685,
        0.4718725745411687,
        0.4746386968632583,
        0.4774001393740067,
        0.480156874846325,
        0.4829088760995346,
        0.4856561159996347,
        0.4883985674595706,
        0.4911362034395001,
        0.4938689969470603,
        0.496596921037634,
        0.499319948814615,
        0.5020380534296734,
        0.5047512080830207,
        0.5074593860236731,
        0.5101625605497166,
        0.512860705008569,
        0.5155537927972433,
        0.5182417973626102,
        0.5209246922016593,
        0.523602450861761,
        0.5262750469409269,
        0.5289424540880703,
        0.531604646003266,
        0.5342615964380096,
        0.5369132791954764,
        0.5395596681307795,
        0.5422007371512276,
        0.5448364602165826,
        0.5474668113393157,
        0.5500917645848645,
        0.5527112940718879,
        0.5553253739725216,
        0.557933978512633,
        0.560537081972075,
        0.5631346586849396,
        0.5657266830398112,
        0.5683131294800188,
        0.5708939725038883,
        0.5734691866649938,
        0.5760387465724085,
        0.5786026268909548,
        0.5811608023414545,
        0.5837132477009781,
        0.5862599378030929,
        0.5888008475381117,
        0.5913359518533403,
        0.5938652257533241,
        0.596388644300095,
        0.5989061826134172,
        0.6014178158710324,
        0.6039235193089044,
        0.6064232682214636,
        0.6089170379618506,
        0.6114048039421587,
        0.613886541633677,
        0.6163622265671316,
        0.6188318343329274,
        0.6212953405813886,
        0.6237527210229986,
        0.6262039514286397,
        0.6286490076298319,
        0.6310878655189711,
        0.6335205010495673,
        0.6359468902364808,
        0.6383670091561593,
        0.6407808339468741,
        0.6431883408089545,
        0.6455895060050229,
        0.6479843058602289,
        0.6503727167624831,
        0.6527547151626887,
        0.655130277574975,
        0.6574993805769284,
        0.659862000809823,
        0.6622181149788519,
        0.6645676998533556,
        0.6669107322670522,
        0.6692471891182651,
        0.6715770473701508,
        0.6739002840509268,
        0.676216876254097,
        0.6785268011386782,
        0.6808300359294255,
        0.6831265579170562,
        0.6854163444584741,
        0.6876993729769928,
        0.6899756209625583,
        0.6922450659719706,
        0.6945076856291054,
        0.6967634576251345,
        0.6990123597187459,
        0.7012543697363629,
        0.7034894655723629,
        0.7057176251892954,
        0.7079388266180989,
        0.7101530479583181,
        0.7123602673783193,
        0.7145604631155059,
        0.716753613476533,
        0.7189396968375211,
        0.7211186916442699,
        0.7232905764124696,
        0.7254553297279142,
        0.7276129302467114,
        0.7297633566954941,
        0.731906587871629,
        0.7340426026434268,
        0.7361713799503499,
        0.7382928988032199,
        0.7404071382844252,
        0.7425140775481267,
        0.7446136958204633,
        0.7467059723997574,
        0.7487908866567183,
        0.7508684180346457,
        0.7529385460496325,
        0.7550012502907671,
        0.7570565104203342,
        0.7591043061740154,
        0.7611446173610891,
        0.7631774238646294,
        0.7652027056417049,
        0.7672204427235757,
        0.7692306152158908,
        0.7712332032988838,
        0.7732281872275689,
        0.7752155473319349,
        0.7771952640171396,
        0.7791673177637031,
        0.7811316891276995,
        0.7830883587409498,
        0.7850373073112119,
        0.786978515622371,
        0.7889119645346293,
        0.7908376349846947,
        0.7927555079859687,
        0.7946655646287335,
        0.7965677860803383,
        0.7984621535853855,
        0.8003486484659154,
        0.8022272521215899,
        0.8040979460298764,
        0.8059607117462306,
        0.8078155309042779,
        0.8096623852159945,
        0.811501256471888,
        0.8133321265411767,
        0.8151549773719687,
        0.8169697909914395,
        0.8187765495060093,
        0.8205752351015196,
        0.8223658300434088,
        0.8241483166768867,
        0.8259226774271093,
        0.8276888947993514,
        0.8294469513791792,
        0.8311968298326224,
        0.8329385129063448,
        0.8346719834278143,
        0.8363972243054726,
        0.8381142185289034,
        0.8398229491690001,
        0.8415233993781331,
        0.8432155523903155,
        0.8448993915213685,
        0.846574900169086,
        0.8482420618133982,
        0.8499008600165348,
        0.8515512784231863,
        0.8531933007606665,
        0.8548269108390713,
        0.8564520925514401,
        0.8580688298739131,
        0.8596771068658904,
        0.8612769076701884,
        0.8628682165131966,
        0.864451017705033,
        0.8660252956396985,
        0.8675910347952316,
        0.8691482197338605,
        0.8706968351021556,
        0.8722368656311812,
        0.8737682961366459,
        0.875291111519052,
        0.876805296763845,
        0.8783108369415608,
        0.8798077172079737,
        0.8812959228042421,
        0.8827754390570548,
        0.8842462513787749,
        0.8857083452675839,
        0.8871617063076249,
        0.8886063201691445,
        0.8900421726086343,
        0.8914692494689709,
        0.8928875366795559,
        0.8942970202564546,
        0.8956976863025338,
        0.8970895210075985,
        0.898472510648529,
        0.8998466415894147,
        0.9012119002816904,
        0.9025682732642681,
        0.903915747163671,
        0.9052543086941648,
        0.9065839446578885,
        0.9079046419449854,
        0.9092163875337312,
        0.9105191684906633,
        0.9118129719707079,
        0.9130977852173066,
        0.9143735955625425,
        0.915640390427265,
        0.9168981573212134,
        0.9181468838431406,
        0.9193865576809351,
        0.9206171666117428,
        0.9218386985020864,
        0.9230511413079867,
        0.9242544830750798,
        0.925448711938736,
        0.9266338161241762,
        0.9278097839465882,
        0.928976603811242,
        0.9301342642136041,
        0.9312827537394508,
        0.9324220610649806,
        0.9335521749569263,
        0.9346730842726655,
        0.9357847779603303,
        0.9368872450589167,
        0.9379804746983922,
        0.9390644560998033,
        0.9401391785753814,
        0.9412046315286491,
        0.9422608044545232,
        0.9433076869394198,
        0.9443452686613558,
        0.9453735393900514,
        0.9463924889870307,
        0.9474021074057215,
        0.9484023846915548,
        0.9493933109820625,
        0.9503748765069749,
        0.951347071588317,
        0.9523098866405036,
        0.9532633121704347,
        0.9542073387775878,
        0.9551419571541118,
        0.9560671580849179,
        0.956982932447771,
        0.9578892712133795,
        0.9587861654454841,
        0.9596736063009463,
        0.9605515850298352,
        0.9614200929755139,
        0.9622791215747253,
        0.9631286623576756,
        0.9639687069481189,
        0.9647992470634386,
        0.9656202745147303,
        0.9664317812068817,
        0.9672337591386525,
        0.9680262004027537,
        0.9688090971859251,
        0.9695824417690128,
        0.9703462265270447,
        0.9711004439293064,
        0.9718450865394149,
        0.9725801470153922,
        0.9733056181097374,
        0.9740214926694986,
        0.974727763636343,
        0.9754244240466269,
        0.9761114670314638,
        0.9767888858167928,
        0.9774566737234449,
        0.978114824167209,
        0.9787633306588969,
        0.9794021868044072,
        0.9800313863047881,
        0.9806509229563004,
        0.9812607906504773,
        0.9818609833741858,
        0.9824514952096856,
        0.9830323203346869,
        0.983603453022409,
        0.9841648876416356,
        0.9847166186567707,
        0.9852586406278939,
        0.9857909482108129,
        0.9863135361571168,
        0.9868263993142279,
        0.9873295326254522,
        0.9878229311300296,
        0.9883065899631827,
        0.9887805043561644,
        0.9892446696363055,
        0.9896990812270609,
        0.9901437346480535,
        0.99057862551512,
        0.991003749540353,
        0.991419102532144,
        0.9918246803952242,
        0.9922204791307051,
        0.9926064948361183,
        0.9929827237054533,
        0.9933491620291958,
        0.9937058061943637,
        0.9940526526845432,
        0.9943896980799236,
        0.9947169390573305,
        0.9950343723902594,
        0.9953419949489071,
        0.9956398037002028,
        0.9959277957078384,
        0.9962059681322979,
        0.9964743182308847,
        0.9967328433577501,
        0.9969815409639196,
        0.9972204085973179,
        0.997449443902795,
        0.99766864462215,
        0.9978780085941545,
        0.9980775337545768,
        0.9982672181362039,
        0.9984470598688657,
        0.9986170571794587,
        0.9987772083919715,
        0.9989275119275132,
        0.9990679663043477,
        0.9991985701379369,
        0.9993193221410008,
        0.9994302211236081,
        0.999531265993324,
        0.9996224557554706,
        0.9997037895136229,
        0.999775266470634,
        0.9998368859309701,
        0.9998886473067012,
        0.9999305501355009,
        0.9999625941483602,
        0.9999847796329174,
        0.9999971112980756};

    // convert to postfix
    _POSTFIX__ P_function = submodule_Parse(I_function);
    if (P_function.size <= 0 || P_function.tokens == NULL)
        return -3;

    double sum = 0.0;
    double _A_ = (b - a) / 2.0;
    double _B_ = (a + b) / 2.0;
    for (unsigned short int i = 0; i < 1000; i++)
    {
        sum += weights[i] * ni_eval_P_function(P_function, var, _A_ * nodes[i] + _B_);
    }

    (*result) = sign * sum * _A_;

    // clean up
    if (P_function.tokens != NULL)
        free(P_function.tokens);

    return 0;
}

// =============================================================================================================================== //
// Adaptive Quadrature
// =============================================================================================================================== //
/*
Apdative Quadrature method

Good for general cases with extreme precision
However it takes much time for moderate or extreme "oscillatory" functions (E.g: sin(100x) or cos(1000x))

@param I_function: Function to integrate (infix type)
@param var: Integrate with respect to
@param a, b: Lower & upper bounds
@param result: (double type) Pointer to a memory cell that stores the integral
@param tolerance: The desired error in result

Returns:

0  : If the integral is found

-1 : Invalid I_function

-2 : Invalid variable to integrate (E.g: 'c' 'e' 'g')

-3 : a or b is not finite

-4 : Failed to convert infix to postfix

-5 : Lower & upper bounds are the singularities

References:

https://sites.millersville.edu/rbuchanan/math375/Adaptive.pdf

https://en.wikipedia.org/wiki/Adaptive_quadrature

https://math.libretexts.org/Bookshelves/Calculus/CLP-2_Integral_Calculus_(Feldman_Rechnitzer_and_Yeager)/04%3A_Appendices/4.03%3A_C%3A_More_About_Numerical_Integration/4.3.03%3A_C.3%3A_Adaptive_Quadrature
*/
short int ni_integral_aq(const __INFIX__ I_function, const char var, const double a, const double b, double *result, const double tolerance)
{
    // check for valid parameters
    if (I_function.size <= 0 || I_function.tokens == NULL)
        return -1;

    if (var == '\0' || var == 'c' || var == 'e' || var == 'g')
        return -2;

    if (!isfinite(a) || !isfinite(b))
        return -3;

    char exception[2] = {var, '\0'};
    short int substitude_status = ni_substitude_variables(&I_function, exception);

    // convert to postfix
    _POSTFIX__ P_function = submodule_Parse(I_function);
    if (P_function.size <= 0 || P_function.tokens == NULL)
        return -4;

    if (!isfinite(ni_eval_P_function(P_function, var, a)) || !isfinite(ni_eval_P_function(P_function, var, b)))
        return -5;

    // init simpson estimate on [a, b]
    double SE_ab = ni_simpson_estimate(P_function, var, a, b);

    short int status = ni_recurse(P_function, var, a, b, result, tolerance, SE_ab);
    if (status < 0)
    {
        if (P_function.tokens != NULL)
            free(P_function.tokens);
        *result = NAN;
        return status;
    }

    // clean up
    if (P_function.tokens != NULL)
        free(P_function.tokens);
    return 0;
}

double ni_simpson_estimate(const _POSTFIX__ P_function, const char var, const double a, const double b)
{
    double c = (a + b) / 2.0;
    return ((b - a) / 6.0) * (ni_eval_P_function(P_function, var, a) + 4.0 * ni_eval_P_function(P_function, var, c) + ni_eval_P_function(P_function, var, b));
}

short int ni_recurse(const _POSTFIX__ P_function, const char var, const double a, const double b, double *result, const double tolerance, const double simpson_estimate)
{
    double c = (a + b) / 2.0;

    // Apply simpson estimate on subintervals
    double SE_ac = ni_simpson_estimate(P_function, var, a, c);
    double SE_cb = ni_simpson_estimate(P_function, var, c, b);

    if (!isfinite(SE_ac) || !isfinite(SE_cb))
    {
        *result = NAN;
        return -6;
    }

    double error = SE_ac + SE_cb - simpson_estimate;

    // check if error match with the given tolerance
    if (fabs(error) < 15.0 * tolerance)
    {
        // apply Richardson extrapolation to enhance preccision
        *result = SE_ac + SE_cb + error / 15.0;
        return 0;
    }

    // else
    // split tolerance evenly between halves
    double left, right;
    ni_recurse(P_function, var, a, c, &left, tolerance / 2.0, SE_ac);
    ni_recurse(P_function, var, c, b, &right, tolerance / 2.0, SE_cb);

    if (!isfinite(left) || !isfinite(right))
    {
        *result = NAN;
        return -7;
    }

    *result = left + right;
    return 0;
}

// =============================================================================================================================== //
// Double Exponential (Tanh-Sinh) Quadrature
// =============================================================================================================================== //

/* Double Exponential (Tanh-Sinh) quadrature integration

Best for integral that have singularties at endpoints, semifinite and infinite interval


  @param I_function: infix expression to integrate
  @param var: variable of integration
  @param a,b: integration limits
  @param result: pointer to store result
  @param error: pointer to store error estimate

Returns:

  -1: invalid expression

  -2: contains invalid functions

  -3: invalid variable

References:

https://en.wikipedia.org/wiki/Tanh-sinh_quadrature

https://github.com/Robert-van-Engelen/Tanh-Sinh

*/
short int ni_integral_quad(const __INFIX__ I_function, const char var, const double a, const double b, double *result, double *error)
{
    // check for valid parameters
    if (I_function.tokens == NULL || I_function.size <= 0)
        return -1;
    if (var == '\0' || var == 'e' || var == 'c' || var == 'g')
        return -3;

    // pre-calculation

    // check for valid functions in the I_function expression
    for (unsigned short int i = 0; i < I_function.size; i++)
    {
        if (I_function.tokens[i].operator== '\0')
            continue;
        if (I_function.tokens[i].operator== SPECIFIER_OF_INTEGRAL ||
            I_function.tokens[i]
                .operator== SPECIFIER_OF_DIF ||
            I_function.tokens[i]
                .operator== SPECIFIER_OF_SIGMA_SUM ||
            I_function.tokens[i]
                .operator== SPECIFIER_OF_PRODUCT_OF_SEQUENCE)
        {
            return -2;
        }
    }

    // substitude variables
    char exception[2] = {var, '\0'};
    short int substitude_status = ni_substitude_variables(&I_function, exception);
    if (substitude_status == -1)
        return -1;

    // decide accuracy
    double epsilon = 1e-12;
    const int max_iteration = 1000;

    // start the computing section
    (*result) = quad(I_function, var, a, b, max_iteration, epsilon, error);

    return 0;
}

double exp_sinh_opt_d(const _POSTFIX__ P_function, const char var, /* double (*___function___)(double), */ double a, double eps, double d)
{
    int ev = 2;
    // const double base = 2; // 2 or 3 or exp(1) for example
    // double h2 = ___function___(a + d / 2) - ___function___(a + d * 2) * 4;
    double h2 = ni_eval_P_function(P_function, var, a + d / 2) - ni_eval_P_function(P_function, var, a + d * 2) * 4;
    int i = 1, j = 32; // j=32 is optimal to search for r
    if (isfinite(h2) && fabs(h2) > 1e-5)
    { // if |h2| > 2^-16
        double r, fl, fr, h, s = 0, lfl, lfr, lr = 2;
        do
        { // find max j such that fl and fr are finite
            j /= 2;
            r = 1 << (i + j);
            // fl = ___function___(a + d / r);
            fl = ni_eval_P_function(P_function, var, a + d / r);
            // fr = ___function___(a + d * r) * r * r;
            fr = ni_eval_P_function(P_function, var, a + d * r) * r * r;
            ev += 2;
            h = fl - fr;
        } while (j > 1 && !isfinite(h));
        if (j > 1 && isfinite(h) && sign(h) != sign(h2))
        {
            lfl = fl; // last fl=___function___(a+d/r)
            lfr = fr; // last fr=___function___(a+d*r)*r*r
            do
            { // bisect in 4 iterations
                j /= 2;
                r = 1 << (i + j);
                // fl = ___function___(a + d / r);
                fl = ni_eval_P_function(P_function, var, a + d / r);
                // fr = ___function___(a + d * r) * r * r;
                fr = ni_eval_P_function(P_function, var, a + d * r) * r * r;
                ev += 2;
                h = fl - fr;
                if (isfinite(h))
                {
                    s += fabs(h); // sum |h| to remove noisy cases
                    if (sign(h) == sign(h2))
                    {
                        i += j; // search right half
                    }
                    else
                    {             // search left half
                        lfl = fl; // record last fl=___function___(a+d/r)
                        lfr = fr; // record last fr=___function___(a+d*r)*r*r
                        lr = r;   // record last r
                    }
                }
            } while (j > 1);
            if (s > eps)
            {                  // if sum of |h| > eps
                h = lfl - lfr; // use last fl and fr before the sign change
                r = lr;        // use last r before the sign change
                if (h != 0)    // if last difference was nonzero, back up r by one step
                    r /= 2;
                if (fabs(lfl) < fabs(lfr))
                    d /= r; // move d closer to the finite endpoint
                else
                    d *= r; // move d closer to the infinite endpoint
            }
        }
    }
    return d;
}

/* integrate function, range a..b, max levels n (2 to 7, 6 is recommended), relative error tolerance eps, estimated relative error err


  @param I_function: infix expression to integrate
  @param var: variable of integration
  @param a,b: integration limits
  @param n: maximum number of iterations (recommended: 6)
  @param eps: relative error tolerance
  @param err: pointer to store estimated relative error

Returns:
  result of integration */
double quad(const __INFIX__ I_function, const char var, /* double (*___function___)(double), */ double a, double b, int n, double eps, double *err)
{
    // turn infix to postfix
    _POSTFIX__ P_function = submodule_Parse(I_function);

    const double tol = FUDGE1 * eps;
    double c = 0, d = 1, s, sign = 1, e, v, h = 2;
    int k = 0, mode = 0; // Tanh-Sinh = 0, Exp-Sinh = 1, Sinh-Sinh = 2
    if (b < a)
    { // swap bounds
        v = b;
        b = a;
        a = v;
        sign = -1;
    }
    if (isfinite(a) && isfinite(b))
    {
        c = (a + b) / 2;
        d = (b - a) / 2;
        v = c;
    }
    else if (isfinite(a))
    {
        mode = 1; // Exp-Sinh
        // d = exp_sinh_opt_d(___function___, a, eps, d);
        d = exp_sinh_opt_d(P_function, var, a, eps, d);
        c = a;
        v = a + d;
    }
    else if (isfinite(b))
    {
        mode = 1; // Exp-Sinh
        // d = exp_sinh_opt_d(___function___, b, eps, -d);
        d = exp_sinh_opt_d(P_function, var, b, eps, -d);
        sign = -sign;
        c = b;
        v = b + d;
    }
    else
    {
        mode = 2; // Sinh-Sinh
        v = 0;
    }
    // s = ___function___(v);
    s = ni_eval_P_function(P_function, var, v);
    do
    {
        double p = 0, q, fp = 0, fm = 0, t, eh;
        h /= 2;
        t = eh = exp(h);
        if (k > 0)
            eh *= eh;
        if (mode == 0)
        { // Tanh-Sinh
            do
            {
                double u = exp(1 / t - t);            // = exp(-2*sinh(j*h)) = 1/exp(sinh(j*h))^2
                double r = 2 * u / (1 + u);           // = 1 - tanh(sinh(j*h))
                double w = (t + 1 / t) * r / (1 + u); // = cosh(j*h)/cosh(sinh(j*h))^2
                double x = d * r;
                if (a + x > a)
                { // if too close to a then reuse previous fp
                    // double y = ___function___(a + x);
                    double y = ni_eval_P_function(P_function, var, a + x);
                    if (isfinite(y))
                        fp = y; // if ___function___(x) is finite, add to local sum
                }
                if (b - x < b)
                { // if too close to b then reuse previous fm
                    // double y = ___function___(b - x);
                    double y = ni_eval_P_function(P_function, var, b - x);
                    if (isfinite(y))
                        fm = y; // if ___function___(x) is finite, add to local sum
                }
                q = w * (fp + fm);
                p += q;
                t *= eh;
            } while (fabs(q) > eps * fabs(p));
        }
        else
        {
            t /= 2;
            do
            {
                double r = exp(t - .25 / t); // = exp(sinh(j*h))
                double x, y, w = r;
                q = 0;
                if (mode == 1)
                { // Exp-Sinh
                    x = c + d / r;
                    if (x == c) // if x hit the finite endpoint then break
                        break;
                    // y = ___function___(x);
                    y = ni_eval_P_function(P_function, var, x);
                    if (isfinite(y)) // if ___function___(x) is finite, add to local sum
                        q += y / w;
                }
                else
                {                        // Sinh-Sinh
                    r = (r - 1 / r) / 2; // = sinh(sinh(j*h))
                    w = (w + 1 / w) / 2; // = cosh(sinh(j*h))
                    x = c - d * r;
                    // y = ___function___(x);
                    y = ni_eval_P_function(P_function, var, x);
                    if (isfinite(y)) // if ___function___(x) is finite, add to local sum
                        q += y * w;
                }
                x = c + d * r;
                // y = ___function___(x);
                y = ni_eval_P_function(P_function, var, x);
                if (isfinite(y)) // if ___function___(x) is finite, add to local sum
                    q += y * w;
                q *= t + .25 / t; // q *= cosh(j*h)
                p += q;
                t *= eh;
            } while (fabs(q) > eps * fabs(p));
        }
        v = s - p;
        s += p;
        ++k;
    } while (fabs(v) > tol * fabs(s) && k <= n);
    // if the estimated relative error is desired, then return it
    if (err != NULL)
        *err = fabs(v) / (FUDGE2 * fabs(s) + eps);
    // result with estimated relative error err

    // clean up allocated memories
    if (P_function.tokens != NULL)
        free(P_function.tokens);

    return sign * d * s * h;
}

// =============================================================================================================================== //
// =============================================================================================================================== //
// =============================================================================================================================== //

double ni_eval_P_function(const _POSTFIX__ P_function, const char var, const double value)
{
    // Make a copy of P_function
    _POSTFIX__ cloned_exp = copy_postfix_expression(P_function);

    // substitude var
    for (unsigned short int i = 0; i < cloned_exp.size; i++)
    {
        if (cloned_exp.tokens[i].variable == var)
        {
            cloned_exp.tokens[i].num = value;
            cloned_exp.tokens[i].variable = '\0';
        }
    }

    while (cloned_exp.size > 1)
    {
        int i;
        char OP = '\0';
        for (i = 0; i < cloned_exp.size; i++)
        {
            if (cloned_exp.tokens[i].operator== '\0')
                continue;

            OP = cloned_exp.tokens[i].operator;

            switch (OP)
            {
            case '+': // addition
                cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num + cloned_exp.tokens[i - 1].num;
                break;
            case '-': // substraction
                cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num - cloned_exp.tokens[i - 1].num;
                break;
            case '*': // multiplication
                cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num * cloned_exp.tokens[i - 1].num;
                break;
            case '/': // division
            {
                if (cloned_exp.tokens[i - 1].num == 0.0)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 2].num = cloned_exp.tokens[i - 2].num / cloned_exp.tokens[i - 1].num;
                break;
            }
            case '%': // remainder modulo
            {
                if (!is_integer(cloned_exp.tokens[i - 2].num) || !is_integer(cloned_exp.tokens[i - 1].num))
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 2].num = (double)(((int)cloned_exp.tokens[i - 2].num) % ((int)cloned_exp.tokens[i - 1].num));
                break;
            }
            case '^': // exponential
                cloned_exp.tokens[i - 2].num = pow(cloned_exp.tokens[i - 2].num, cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_SIN: // sin
                cloned_exp.tokens[i - 1].num = sin(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_SINH: // sinh
                cloned_exp.tokens[i - 1].num = sinh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_SEC: // sec
                cloned_exp.tokens[i - 1].num = 1 / cos(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_SECH: // sech
                cloned_exp.tokens[i - 1].num = 1 / cosh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCSEC: // arcsec
                cloned_exp.tokens[i - 1].num = arcsec(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCSECH: // arcsech
                cloned_exp.tokens[i - 1].num = arcsech(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_COS: // cos
                cloned_exp.tokens[i - 1].num = cos(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_COSH: // cosh
                cloned_exp.tokens[i - 1].num = cosh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_CSC: // csc
                cloned_exp.tokens[i - 1].num = 1 / sin(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_CSCH: // csch
                cloned_exp.tokens[i - 1].num = csch(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCCSC: // arccsc
                cloned_exp.tokens[i - 1].num = arccsc(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCCSCH: // arccsch
                cloned_exp.tokens[i - 1].num = arccsch(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_TAN: // tan
                cloned_exp.tokens[i - 1].num = tan(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_TANH: // tanh
                cloned_exp.tokens[i - 1].num = tanh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_COT: // cot
                cloned_exp.tokens[i - 1].num = 1 / tan(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_COTH: // coth
                cloned_exp.tokens[i - 1].num = coth(cloned_exp.tokens[i - 1].num);
                break;
            case '!': // factorial
            {
                // Check if it's an integer or not
                if (!is_integer(cloned_exp.tokens[i - 1].num) || cloned_exp.tokens[i - 1].num < 0)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                double fac = 1.0;
                double n = cloned_exp.tokens[i - 1].num;
                for (double f = 1.0; f <= n; f++)
                    fac *= f;
                if (fac > __DBL_MAX__)
                    cloned_exp.tokens[i - 1].num = NAN;
                else
                    cloned_exp.tokens[i - 1].num = (double)fac;
                break;
            }
            case SPECIFIER_OF_ARCSIN: // arcsin
                cloned_exp.tokens[i - 1].num = asin(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCSINH: // arcsinh
                cloned_exp.tokens[i - 1].num = asinh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCCOS: // arccos
                cloned_exp.tokens[i - 1].num = acos(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCCOSH: // arccosh
                cloned_exp.tokens[i - 1].num = acosh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCTAN: // arctan
                cloned_exp.tokens[i - 1].num = atan(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCTANH: // arctanh
                cloned_exp.tokens[i - 1].num = atanh(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_ARCCOT: // arccot
            {
                if (cloned_exp.tokens[i - 1].num > 0.0)
                    cloned_exp.tokens[i - 1].num = atan(1.0 / (cloned_exp.tokens[i - 1].num));
                else
                    cloned_exp.tokens[i - 1].num = atan(1.0 / (cloned_exp.tokens[i - 1].num)) + PI;
                break;
            }
            case SPECIFIER_OF_ARCCOTH: // arccoth
                cloned_exp.tokens[i - 1].num = arccoth(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_LN: // ln
            {
                if (cloned_exp.tokens[i - 1].num <= 0.0)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 1].num = log(cloned_exp.tokens[i - 1].num);
                break;
            }
            case SPECIFIER_OF_LG: // log10
            {
                if (cloned_exp.tokens[i - 1].num <= 0.0)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 1].num = log10(cloned_exp.tokens[i - 1].num);
                break;
            }
            case SPECIFIER_OF_SQRT: // sqrt
            {
                if (cloned_exp.tokens[i - 1].num < 0.0)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 1].num = sqrt(cloned_exp.tokens[i - 1].num);
                break;
            }
            case SPECIFIER_OF_ABS: // abs
            {
                if (cloned_exp.tokens[i - 1].num < 0.0)
                    cloned_exp.tokens[i - 1].num = -cloned_exp.tokens[i - 1].num;
                break;
            }
            case SPECIFIER_OF_CBRT: // cuberoot
                cloned_exp.tokens[i - 1].num = cbrt(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_GAMMA: // gamma function
            {
                if (cloned_exp.tokens[i - 1].num < 0.0)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 1].num = gamma_function(cloned_exp.tokens[i - 1].num);
                break;
            }
            case SPECIFIER_OF_CEIL: // ceiling function
                cloned_exp.tokens[i - 1].num = ceil(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_FLOOR: // floor function
                cloned_exp.tokens[i - 1].num = floor(cloned_exp.tokens[i - 1].num);
                break;
            case SPECIFIER_OF_LAMBERTW: // lambert W function
            {
                if (cloned_exp.tokens[i - 1].num < -1.0 / EULER_NUMBER)
                {
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens[i - 1].num = lambertw_real(cloned_exp.tokens[i - 1].num);
                break;
            }
            default:
            {
                free(cloned_exp.tokens);
                return NAN;
            }
            }

            break;
        }

        if ((OP == '-' || OP == '+' || OP == '*' || OP == '/' || OP == '^' || OP == '^' || OP == '%') && !isfinite(cloned_exp.tokens[i - 2].num))
        {
            // puts("-NAN-\n");
            free(cloned_exp.tokens);
            return NAN;
        }
        else if (!isfinite(cloned_exp.tokens[i - 1].num))
        {
            // puts("-NAN-\n");
            free(cloned_exp.tokens);
            return NAN;
        }

        // After completing 1 calculation
        {
            // Re-allocate memories for stack
            if (cloned_exp.tokens[i].operator== '-' || cloned_exp.tokens[i].operator== '+' || cloned_exp.tokens[i].operator== '*' || cloned_exp.tokens[i].operator== '/' || cloned_exp.tokens[i].operator== '^' || cloned_exp.tokens[i].operator== '%')
            {
                // rearrange the stack
                for (int k = i - 1; k < cloned_exp.size - 2; k++)
                {
                    cloned_exp.tokens[k].num = cloned_exp.tokens[k + 2].num;
                    cloned_exp.tokens[k].operator= cloned_exp.tokens[k + 2].operator;
                    cloned_exp.tokens[k].variable = cloned_exp.tokens[k + 2].variable;
                }

                // re-allocate the stack's memories
                _TOKENS_DATA_ *temp_ptr = (_TOKENS_DATA_ *)realloc(cloned_exp.tokens, (cloned_exp.size - 2) * sizeof(_TOKENS_DATA_));
                if (temp_ptr == NULL)
                {
                    perror("Failed to re-allocate the stack's memories");
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens = temp_ptr;
                cloned_exp.size -= 2;
            }
            else if (cloned_exp.tokens[i].operator!= '\0')
            {
                // rearrange the stack
                for (int k = i; k < cloned_exp.size - 1; k++)
                {
                    cloned_exp.tokens[k].num = cloned_exp.tokens[k + 1].num;
                    cloned_exp.tokens[k].operator= cloned_exp.tokens[k + 1].operator;
                    cloned_exp.tokens[k].variable = cloned_exp.tokens[k + 1].variable;
                }

                // re-allocate the stack's memories
                _TOKENS_DATA_ *temp_ptr = (_TOKENS_DATA_ *)realloc(cloned_exp.tokens, (cloned_exp.size - 1) * sizeof(_TOKENS_DATA_));
                if (temp_ptr == NULL)
                {
                    perror("Failed to re-allocate the stack's memories");
                    free(cloned_exp.tokens);
                    return NAN;
                }
                cloned_exp.tokens = temp_ptr;
                cloned_exp.size--;
            }
        }
    }

    double result = cloned_exp.tokens[0].num;
    free(cloned_exp.tokens);

    return result;
}

short int ni_substitude_variables(__INFIX__ *I_expression, const char *exceptions)
{
    if (I_expression == NULL || I_expression->tokens == NULL)
        return -1;
    unsigned short int num_of_exception = strlen(exceptions);
    for (unsigned short int i = 0; i < I_expression->size; i++)
    {
        if (I_expression->tokens[i].variable != '\0')
        {
            bool is_exception = false;
            for (unsigned short int e = 0; e < num_of_exception; e++)
            {
                if (I_expression->tokens[i].variable == exceptions[e])
                {
                    is_exception = true;
                    break;
                }
            }

            if (!is_exception)
            {
                I_expression->tokens[i].num = variable_set[I_expression->tokens[i].variable].num;
                I_expression->tokens[i].variable = '\0';
            }
        }
    }
    return 0;
}

#endif